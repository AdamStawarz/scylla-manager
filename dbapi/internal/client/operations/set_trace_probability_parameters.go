// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetTraceProbabilityParams creates a new SetTraceProbabilityParams object
// with the default values initialized.
func NewSetTraceProbabilityParams() *SetTraceProbabilityParams {
	var ()
	return &SetTraceProbabilityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetTraceProbabilityParamsWithTimeout creates a new SetTraceProbabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetTraceProbabilityParamsWithTimeout(timeout time.Duration) *SetTraceProbabilityParams {
	var ()
	return &SetTraceProbabilityParams{

		timeout: timeout,
	}
}

// NewSetTraceProbabilityParamsWithContext creates a new SetTraceProbabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetTraceProbabilityParamsWithContext(ctx context.Context) *SetTraceProbabilityParams {
	var ()
	return &SetTraceProbabilityParams{

		Context: ctx,
	}
}

// NewSetTraceProbabilityParamsWithHTTPClient creates a new SetTraceProbabilityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetTraceProbabilityParamsWithHTTPClient(client *http.Client) *SetTraceProbabilityParams {
	var ()
	return &SetTraceProbabilityParams{
		HTTPClient: client,
	}
}

/*SetTraceProbabilityParams contains all the parameters to send to the API endpoint
for the set trace probability operation typically these are written to a http.Request
*/
type SetTraceProbabilityParams struct {

	/*Probability
	  [0,1] will enable tracing on a partial number of requests with the provided probability. 0 will disable tracing and 1 will enable tracing for all requests (which mich severely cripple the system)

	*/
	Probability int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set trace probability params
func (o *SetTraceProbabilityParams) WithTimeout(timeout time.Duration) *SetTraceProbabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set trace probability params
func (o *SetTraceProbabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set trace probability params
func (o *SetTraceProbabilityParams) WithContext(ctx context.Context) *SetTraceProbabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set trace probability params
func (o *SetTraceProbabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set trace probability params
func (o *SetTraceProbabilityParams) WithHTTPClient(client *http.Client) *SetTraceProbabilityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set trace probability params
func (o *SetTraceProbabilityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProbability adds the probability to the set trace probability params
func (o *SetTraceProbabilityParams) WithProbability(probability int32) *SetTraceProbabilityParams {
	o.SetProbability(probability)
	return o
}

// SetProbability adds the probability to the set trace probability params
func (o *SetTraceProbabilityParams) SetProbability(probability int32) {
	o.Probability = probability
}

// WriteToRequest writes these params to a swagger request
func (o *SetTraceProbabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param probability
	qrProbability := o.Probability
	qProbability := swag.FormatInt32(qrProbability)
	if qProbability != "" {
		if err := r.SetQueryParam("probability", qProbability); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
