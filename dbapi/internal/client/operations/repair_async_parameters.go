// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRepairAsyncParams creates a new RepairAsyncParams object
// with the default values initialized.
func NewRepairAsyncParams() *RepairAsyncParams {
	var ()
	return &RepairAsyncParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepairAsyncParamsWithTimeout creates a new RepairAsyncParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepairAsyncParamsWithTimeout(timeout time.Duration) *RepairAsyncParams {
	var ()
	return &RepairAsyncParams{

		timeout: timeout,
	}
}

// NewRepairAsyncParamsWithContext creates a new RepairAsyncParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepairAsyncParamsWithContext(ctx context.Context) *RepairAsyncParams {
	var ()
	return &RepairAsyncParams{

		Context: ctx,
	}
}

// NewRepairAsyncParamsWithHTTPClient creates a new RepairAsyncParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepairAsyncParamsWithHTTPClient(client *http.Client) *RepairAsyncParams {
	var ()
	return &RepairAsyncParams{
		HTTPClient: client,
	}
}

/*RepairAsyncParams contains all the parameters to send to the API endpoint
for the repair async operation typically these are written to a http.Request
*/
type RepairAsyncParams struct {

	/*ColumnFamilies
	  Which column families to repair in the given keyspace. Multiple columns families can be named separated by commas. If this option is missing, all column families in the keyspace are repaired.

	*/
	ColumnFamilies *string
	/*DataCenters
	  Which data centers are to participate in this repair. Multiple data centers can be listed separated by commas.

	*/
	DataCenters *string
	/*EndToken
	  Token on which to end repair

	*/
	EndToken *string
	/*Hosts
	  Which hosts are to participate in this repair. Multiple hosts can be listed separated by commas.

	*/
	Hosts *string
	/*Incremental
	  If the value is the string 'true' with any capitalization, perform incremental repair.

	*/
	Incremental *string
	/*JobThreads
	  An integer specifying the parallelism on each node.

	*/
	JobThreads *string
	/*Keyspace
	  The keyspace to repair

	*/
	Keyspace string
	/*Parallelism
	  Repair parallelism, can be 0 (sequential), 1 (parallel) or 2 (datacenter-aware).

	*/
	Parallelism *string
	/*PrimaryRange
	  If the value is the string 'true' with any capitalization, repair only the first range returned by the partitioner.

	*/
	PrimaryRange *string
	/*Ranges
	  An explicit list of ranges to repair, overriding the default choice. Each range is expressed as token1:token2, and multiple ranges can be given as a comma separated list.

	*/
	Ranges *string
	/*StartToken
	  Token on which to begin repair

	*/
	StartToken *string
	/*Trace
	  If the value is the string 'true' with any capitalization, enable tracing of the repair.

	*/
	Trace *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repair async params
func (o *RepairAsyncParams) WithTimeout(timeout time.Duration) *RepairAsyncParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repair async params
func (o *RepairAsyncParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repair async params
func (o *RepairAsyncParams) WithContext(ctx context.Context) *RepairAsyncParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repair async params
func (o *RepairAsyncParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repair async params
func (o *RepairAsyncParams) WithHTTPClient(client *http.Client) *RepairAsyncParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repair async params
func (o *RepairAsyncParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColumnFamilies adds the columnFamilies to the repair async params
func (o *RepairAsyncParams) WithColumnFamilies(columnFamilies *string) *RepairAsyncParams {
	o.SetColumnFamilies(columnFamilies)
	return o
}

// SetColumnFamilies adds the columnFamilies to the repair async params
func (o *RepairAsyncParams) SetColumnFamilies(columnFamilies *string) {
	o.ColumnFamilies = columnFamilies
}

// WithDataCenters adds the dataCenters to the repair async params
func (o *RepairAsyncParams) WithDataCenters(dataCenters *string) *RepairAsyncParams {
	o.SetDataCenters(dataCenters)
	return o
}

// SetDataCenters adds the dataCenters to the repair async params
func (o *RepairAsyncParams) SetDataCenters(dataCenters *string) {
	o.DataCenters = dataCenters
}

// WithEndToken adds the endToken to the repair async params
func (o *RepairAsyncParams) WithEndToken(endToken *string) *RepairAsyncParams {
	o.SetEndToken(endToken)
	return o
}

// SetEndToken adds the endToken to the repair async params
func (o *RepairAsyncParams) SetEndToken(endToken *string) {
	o.EndToken = endToken
}

// WithHosts adds the hosts to the repair async params
func (o *RepairAsyncParams) WithHosts(hosts *string) *RepairAsyncParams {
	o.SetHosts(hosts)
	return o
}

// SetHosts adds the hosts to the repair async params
func (o *RepairAsyncParams) SetHosts(hosts *string) {
	o.Hosts = hosts
}

// WithIncremental adds the incremental to the repair async params
func (o *RepairAsyncParams) WithIncremental(incremental *string) *RepairAsyncParams {
	o.SetIncremental(incremental)
	return o
}

// SetIncremental adds the incremental to the repair async params
func (o *RepairAsyncParams) SetIncremental(incremental *string) {
	o.Incremental = incremental
}

// WithJobThreads adds the jobThreads to the repair async params
func (o *RepairAsyncParams) WithJobThreads(jobThreads *string) *RepairAsyncParams {
	o.SetJobThreads(jobThreads)
	return o
}

// SetJobThreads adds the jobThreads to the repair async params
func (o *RepairAsyncParams) SetJobThreads(jobThreads *string) {
	o.JobThreads = jobThreads
}

// WithKeyspace adds the keyspace to the repair async params
func (o *RepairAsyncParams) WithKeyspace(keyspace string) *RepairAsyncParams {
	o.SetKeyspace(keyspace)
	return o
}

// SetKeyspace adds the keyspace to the repair async params
func (o *RepairAsyncParams) SetKeyspace(keyspace string) {
	o.Keyspace = keyspace
}

// WithParallelism adds the parallelism to the repair async params
func (o *RepairAsyncParams) WithParallelism(parallelism *string) *RepairAsyncParams {
	o.SetParallelism(parallelism)
	return o
}

// SetParallelism adds the parallelism to the repair async params
func (o *RepairAsyncParams) SetParallelism(parallelism *string) {
	o.Parallelism = parallelism
}

// WithPrimaryRange adds the primaryRange to the repair async params
func (o *RepairAsyncParams) WithPrimaryRange(primaryRange *string) *RepairAsyncParams {
	o.SetPrimaryRange(primaryRange)
	return o
}

// SetPrimaryRange adds the primaryRange to the repair async params
func (o *RepairAsyncParams) SetPrimaryRange(primaryRange *string) {
	o.PrimaryRange = primaryRange
}

// WithRanges adds the ranges to the repair async params
func (o *RepairAsyncParams) WithRanges(ranges *string) *RepairAsyncParams {
	o.SetRanges(ranges)
	return o
}

// SetRanges adds the ranges to the repair async params
func (o *RepairAsyncParams) SetRanges(ranges *string) {
	o.Ranges = ranges
}

// WithStartToken adds the startToken to the repair async params
func (o *RepairAsyncParams) WithStartToken(startToken *string) *RepairAsyncParams {
	o.SetStartToken(startToken)
	return o
}

// SetStartToken adds the startToken to the repair async params
func (o *RepairAsyncParams) SetStartToken(startToken *string) {
	o.StartToken = startToken
}

// WithTrace adds the trace to the repair async params
func (o *RepairAsyncParams) WithTrace(trace *string) *RepairAsyncParams {
	o.SetTrace(trace)
	return o
}

// SetTrace adds the trace to the repair async params
func (o *RepairAsyncParams) SetTrace(trace *string) {
	o.Trace = trace
}

// WriteToRequest writes these params to a swagger request
func (o *RepairAsyncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ColumnFamilies != nil {

		// query param columnFamilies
		var qrColumnFamilies string
		if o.ColumnFamilies != nil {
			qrColumnFamilies = *o.ColumnFamilies
		}
		qColumnFamilies := qrColumnFamilies
		if qColumnFamilies != "" {
			if err := r.SetQueryParam("columnFamilies", qColumnFamilies); err != nil {
				return err
			}
		}

	}

	if o.DataCenters != nil {

		// query param dataCenters
		var qrDataCenters string
		if o.DataCenters != nil {
			qrDataCenters = *o.DataCenters
		}
		qDataCenters := qrDataCenters
		if qDataCenters != "" {
			if err := r.SetQueryParam("dataCenters", qDataCenters); err != nil {
				return err
			}
		}

	}

	if o.EndToken != nil {

		// query param endToken
		var qrEndToken string
		if o.EndToken != nil {
			qrEndToken = *o.EndToken
		}
		qEndToken := qrEndToken
		if qEndToken != "" {
			if err := r.SetQueryParam("endToken", qEndToken); err != nil {
				return err
			}
		}

	}

	if o.Hosts != nil {

		// query param hosts
		var qrHosts string
		if o.Hosts != nil {
			qrHosts = *o.Hosts
		}
		qHosts := qrHosts
		if qHosts != "" {
			if err := r.SetQueryParam("hosts", qHosts); err != nil {
				return err
			}
		}

	}

	if o.Incremental != nil {

		// query param incremental
		var qrIncremental string
		if o.Incremental != nil {
			qrIncremental = *o.Incremental
		}
		qIncremental := qrIncremental
		if qIncremental != "" {
			if err := r.SetQueryParam("incremental", qIncremental); err != nil {
				return err
			}
		}

	}

	if o.JobThreads != nil {

		// query param jobThreads
		var qrJobThreads string
		if o.JobThreads != nil {
			qrJobThreads = *o.JobThreads
		}
		qJobThreads := qrJobThreads
		if qJobThreads != "" {
			if err := r.SetQueryParam("jobThreads", qJobThreads); err != nil {
				return err
			}
		}

	}

	// path param keyspace
	if err := r.SetPathParam("keyspace", o.Keyspace); err != nil {
		return err
	}

	if o.Parallelism != nil {

		// query param parallelism
		var qrParallelism string
		if o.Parallelism != nil {
			qrParallelism = *o.Parallelism
		}
		qParallelism := qrParallelism
		if qParallelism != "" {
			if err := r.SetQueryParam("parallelism", qParallelism); err != nil {
				return err
			}
		}

	}

	if o.PrimaryRange != nil {

		// query param primaryRange
		var qrPrimaryRange string
		if o.PrimaryRange != nil {
			qrPrimaryRange = *o.PrimaryRange
		}
		qPrimaryRange := qrPrimaryRange
		if qPrimaryRange != "" {
			if err := r.SetQueryParam("primaryRange", qPrimaryRange); err != nil {
				return err
			}
		}

	}

	if o.Ranges != nil {

		// query param ranges
		var qrRanges string
		if o.Ranges != nil {
			qrRanges = *o.Ranges
		}
		qRanges := qrRanges
		if qRanges != "" {
			if err := r.SetQueryParam("ranges", qRanges); err != nil {
				return err
			}
		}

	}

	if o.StartToken != nil {

		// query param startToken
		var qrStartToken string
		if o.StartToken != nil {
			qrStartToken = *o.StartToken
		}
		qStartToken := qrStartToken
		if qStartToken != "" {
			if err := r.SetQueryParam("startToken", qStartToken); err != nil {
				return err
			}
		}

	}

	if o.Trace != nil {

		// query param trace
		var qrTrace string
		if o.Trace != nil {
			qrTrace = *o.Trace
		}
		qTrace := qrTrace
		if qTrace != "" {
			if err := r.SetQueryParam("trace", qTrace); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
