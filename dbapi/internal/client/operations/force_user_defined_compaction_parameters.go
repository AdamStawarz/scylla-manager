// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForceUserDefinedCompactionParams creates a new ForceUserDefinedCompactionParams object
// with the default values initialized.
func NewForceUserDefinedCompactionParams() *ForceUserDefinedCompactionParams {
	var ()
	return &ForceUserDefinedCompactionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewForceUserDefinedCompactionParamsWithTimeout creates a new ForceUserDefinedCompactionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewForceUserDefinedCompactionParamsWithTimeout(timeout time.Duration) *ForceUserDefinedCompactionParams {
	var ()
	return &ForceUserDefinedCompactionParams{

		timeout: timeout,
	}
}

// NewForceUserDefinedCompactionParamsWithContext creates a new ForceUserDefinedCompactionParams object
// with the default values initialized, and the ability to set a context for a request
func NewForceUserDefinedCompactionParamsWithContext(ctx context.Context) *ForceUserDefinedCompactionParams {
	var ()
	return &ForceUserDefinedCompactionParams{

		Context: ctx,
	}
}

// NewForceUserDefinedCompactionParamsWithHTTPClient creates a new ForceUserDefinedCompactionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewForceUserDefinedCompactionParamsWithHTTPClient(client *http.Client) *ForceUserDefinedCompactionParams {
	var ()
	return &ForceUserDefinedCompactionParams{
		HTTPClient: client,
	}
}

/*ForceUserDefinedCompactionParams contains all the parameters to send to the API endpoint
for the force user defined compaction operation typically these are written to a http.Request
*/
type ForceUserDefinedCompactionParams struct {

	/*DataFiles
	  a comma separated list of sstable file to compact. must contain keyspace and columnfamily name in path(for 2.1+) or file name itself

	*/
	DataFiles string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) WithTimeout(timeout time.Duration) *ForceUserDefinedCompactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) WithContext(ctx context.Context) *ForceUserDefinedCompactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) WithHTTPClient(client *http.Client) *ForceUserDefinedCompactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataFiles adds the dataFiles to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) WithDataFiles(dataFiles string) *ForceUserDefinedCompactionParams {
	o.SetDataFiles(dataFiles)
	return o
}

// SetDataFiles adds the dataFiles to the force user defined compaction params
func (o *ForceUserDefinedCompactionParams) SetDataFiles(dataFiles string) {
	o.DataFiles = dataFiles
}

// WriteToRequest writes these params to a swagger request
func (o *ForceUserDefinedCompactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param data_files
	qrDataFiles := o.DataFiles
	qDataFiles := qrDataFiles
	if qDataFiles != "" {
		if err := r.SetQueryParam("data_files", qDataFiles); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
