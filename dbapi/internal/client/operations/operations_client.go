// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AssassinateEndpoint assassinates endpoint

Assassinate an end point
*/
func (a *Client) AssassinateEndpoint(params *AssassinateEndpointParams) (*AssassinateEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssassinateEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assassinate_endpoint",
		Method:             "POST",
		PathPattern:        "/gossiper/assassinate/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssassinateEndpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AssassinateEndpointOK), nil

}

/*
BulkLoad bulks load

Starts a bulk load and blocks until it completes
*/
func (a *Client) BulkLoad(params *BulkLoadParams) (*BulkLoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkLoadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulk_load",
		Method:             "POST",
		PathPattern:        "/storage_service/bulk_load/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkLoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BulkLoadOK), nil

}

/*
BulkLoadAsync bulks load async

Starts a bulk load asynchronously and returns the String representation of the planID for the new streaming session.
*/
func (a *Client) BulkLoadAsync(params *BulkLoadAsyncParams) (*BulkLoadAsyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkLoadAsyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulk_load_async",
		Method:             "GET",
		PathPattern:        "/storage_service/bulk_load_async/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkLoadAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BulkLoadAsyncOK), nil

}

/*
CommitlogRecover commitlogs recover

Recover a single file
*/
func (a *Client) CommitlogRecover(params *CommitlogRecoverParams) (*CommitlogRecoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitlogRecoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "commitlog_recover",
		Method:             "POST",
		PathPattern:        "/commitlog/recover/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitlogRecoverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommitlogRecoverOK), nil

}

/*
Decommission decommissions

transfer this node's data to other machines and remove it from service.
*/
func (a *Client) Decommission(params *DecommissionParams) (*DecommissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecommissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "decommission",
		Method:             "POST",
		PathPattern:        "/storage_service/decommission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecommissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DecommissionOK), nil

}

/*
DelSnapshot dels snapshot

Remove the snapshot with the given name from the given keyspaces. If no tag is specified all snapshots will be removed
*/
func (a *Client) DelSnapshot(params *DelSnapshotParams) (*DelSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "del_snapshot",
		Method:             "DELETE",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DelSnapshotOK), nil

}

/*
DeliverHints delivers hints
*/
func (a *Client) DeliverHints(params *DeliverHintsParams) (*DeliverHintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeliverHintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deliver_hints",
		Method:             "POST",
		PathPattern:        "/storage_service/deliver_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeliverHintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeliverHintsOK), nil

}

/*
DescribeAnyRing describes any ring

The TokenRange for a any keyspace
*/
func (a *Client) DescribeAnyRing(params *DescribeAnyRingParams) (*DescribeAnyRingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAnyRingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describe_any_ring",
		Method:             "GET",
		PathPattern:        "/storage_service/describe_ring/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeAnyRingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeAnyRingOK), nil

}

/*
DescribeRing describes ring

The TokenRange for a given keyspace
*/
func (a *Client) DescribeRing(params *DescribeRingParams) (*DescribeRingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describe_ring",
		Method:             "GET",
		PathPattern:        "/storage_service/describe_ring/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRingOK), nil

}

/*
DisableAutoCompaction disables auto compaction

Disable auto compaction
*/
func (a *Client) DisableAutoCompaction(params *DisableAutoCompactionParams) (*DisableAutoCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableAutoCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disable_auto_compaction",
		Method:             "DELETE",
		PathPattern:        "/storage_service/auto_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableAutoCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisableAutoCompactionOK), nil

}

/*
Drain drains

makes node unavailable for writes, flushes memtables and replays commitlog
*/
func (a *Client) Drain(params *DrainParams) (*DrainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDrainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "drain",
		Method:             "POST",
		PathPattern:        "/storage_service/drain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DrainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DrainOK), nil

}

/*
EnableAllCollectd enables all collectd

Enable or disable all collectd metrics
*/
func (a *Client) EnableAllCollectd(params *EnableAllCollectdParams) (*EnableAllCollectdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableAllCollectdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable_all_collectd",
		Method:             "POST",
		PathPattern:        "/collectd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableAllCollectdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnableAllCollectdOK), nil

}

/*
EnableAutoCompaction enables auto compaction

Enable auto compaction
*/
func (a *Client) EnableAutoCompaction(params *EnableAutoCompactionParams) (*EnableAutoCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableAutoCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable_auto_compaction",
		Method:             "POST",
		PathPattern:        "/storage_service/auto_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableAutoCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnableAutoCompactionOK), nil

}

/*
EnableCollectd enables collectd

Start reporting on one or more collectd metric
*/
func (a *Client) EnableCollectd(params *EnableCollectdParams) (*EnableCollectdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableCollectdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enable_collectd",
		Method:             "POST",
		PathPattern:        "/collectd/{pluginid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableCollectdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnableCollectdOK), nil

}

/*
EstimateKeys estimates keys

Get the estimate keys
*/
func (a *Client) EstimateKeys(params *EstimateKeysParams) (*EstimateKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEstimateKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "estimate_keys",
		Method:             "GET",
		PathPattern:        "/column_family/estimate_keys/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EstimateKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EstimateKeysOK), nil

}

/*
ForceKeyspaceCleanup forces keyspace cleanup

Trigger a cleanup of keys on a single keyspace
*/
func (a *Client) ForceKeyspaceCleanup(params *ForceKeyspaceCleanupParams) (*ForceKeyspaceCleanupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceKeyspaceCleanupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_keyspace_cleanup",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_cleanup/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceKeyspaceCleanupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceKeyspaceCleanupOK), nil

}

/*
ForceKeyspaceCompaction forces keyspace compaction

Forces major compaction of a single keyspace
*/
func (a *Client) ForceKeyspaceCompaction(params *ForceKeyspaceCompactionParams) (*ForceKeyspaceCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceKeyspaceCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_keyspace_compaction",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_compaction/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceKeyspaceCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceKeyspaceCompactionOK), nil

}

/*
ForceKeyspaceFlush forces keyspace flush

Flush all memtables for the given column families, or all columnfamilies for the given keyspace if none are explicitly listed.
*/
func (a *Client) ForceKeyspaceFlush(params *ForceKeyspaceFlushParams) (*ForceKeyspaceFlushOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceKeyspaceFlushParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_keyspace_flush",
		Method:             "POST",
		PathPattern:        "/storage_service/keyspace_flush/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceKeyspaceFlushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceKeyspaceFlushOK), nil

}

/*
ForceMajorCompaction forces major compaction

Force a major compaction of this column family
*/
func (a *Client) ForceMajorCompaction(params *ForceMajorCompactionParams) (*ForceMajorCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceMajorCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_major_compaction",
		Method:             "POST",
		PathPattern:        "/column_family/major_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceMajorCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceMajorCompactionOK), nil

}

/*
ForceRemoveCompletion forces remove completion

Force a remove operation to finish.
*/
func (a *Client) ForceRemoveCompletion(params *ForceRemoveCompletionParams) (*ForceRemoveCompletionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceRemoveCompletionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_remove_completion",
		Method:             "POST",
		PathPattern:        "/storage_service/force_remove_completion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceRemoveCompletionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceRemoveCompletionOK), nil

}

/*
ForceTerminateAllRepairSessions forces terminate all repair sessions

Force terminate all repair sessions
*/
func (a *Client) ForceTerminateAllRepairSessions(params *ForceTerminateAllRepairSessionsParams) (*ForceTerminateAllRepairSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceTerminateAllRepairSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_terminate_all_repair_sessions",
		Method:             "POST",
		PathPattern:        "/storage_service/force_terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceTerminateAllRepairSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceTerminateAllRepairSessionsOK), nil

}

/*
ForceUserDefinedCompaction forces user defined compaction

Triggers the compaction of user specified sstables. You can specify files from various keyspaces and columnfamilies. If you do so, user defined compaction is performed several times to the groups of files in the same keyspace/columnfamily. must contain keyspace and columnfamily name in path(for 2.1+) or file name itself.
*/
func (a *Client) ForceUserDefinedCompaction(params *ForceUserDefinedCompactionParams) (*ForceUserDefinedCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceUserDefinedCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "force_user_defined_compaction",
		Method:             "POST",
		PathPattern:        "/compaction_manager/force_user_defined_compaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceUserDefinedCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ForceUserDefinedCompactionOK), nil

}

/*
GetActiveSegmentNames gets active segment names

file names (not full paths) of active commit log segments (segments containing unflushed data)
*/
func (a *Client) GetActiveSegmentNames(params *GetActiveSegmentNamesParams) (*GetActiveSegmentNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveSegmentNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_active_segment_names",
		Method:             "GET",
		PathPattern:        "/commitlog/segments/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActiveSegmentNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActiveSegmentNamesOK), nil

}

/*
GetAllActiveStreamsOutbound gets all active streams outbound

Get number of active outbound streams
*/
func (a *Client) GetAllActiveStreamsOutbound(params *GetAllActiveStreamsOutboundParams) (*GetAllActiveStreamsOutboundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllActiveStreamsOutboundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_active_streams_outbound",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outbound",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllActiveStreamsOutboundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllActiveStreamsOutboundOK), nil

}

/*
GetAllBloomFilterDiskSpaceUsed gets all bloom filter disk space used

Get all bloom filter disk space used
*/
func (a *Client) GetAllBloomFilterDiskSpaceUsed(params *GetAllBloomFilterDiskSpaceUsedParams) (*GetAllBloomFilterDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBloomFilterDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_bloom_filter_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllBloomFilterDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllBloomFilterDiskSpaceUsedOK), nil

}

/*
GetAllBloomFilterFalsePositives gets all bloom filter false positives

Get all bloom filter false positives
*/
func (a *Client) GetAllBloomFilterFalsePositives(params *GetAllBloomFilterFalsePositivesParams) (*GetAllBloomFilterFalsePositivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBloomFilterFalsePositivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_bloom_filter_false_positives",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_positives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllBloomFilterFalsePositivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllBloomFilterFalsePositivesOK), nil

}

/*
GetAllBloomFilterFalseRatio gets all bloom filter false ratio

Get all bloom filter false ratio
*/
func (a *Client) GetAllBloomFilterFalseRatio(params *GetAllBloomFilterFalseRatioParams) (*GetAllBloomFilterFalseRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBloomFilterFalseRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_bloom_filter_false_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllBloomFilterFalseRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllBloomFilterFalseRatioOK), nil

}

/*
GetAllBloomFilterOffHeapMemoryUsed gets all bloom filter off heap memory used

Get all bloom filter off heap memory used
*/
func (a *Client) GetAllBloomFilterOffHeapMemoryUsed(params *GetAllBloomFilterOffHeapMemoryUsedParams) (*GetAllBloomFilterOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBloomFilterOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_bloom_filter_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllBloomFilterOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllBloomFilterOffHeapMemoryUsedOK), nil

}

/*
GetAllCfAllMemtablesLiveDataSize gets all cf all memtables live data size

Get all memtables active and not of all column family live data size
*/
func (a *Client) GetAllCfAllMemtablesLiveDataSize(params *GetAllCfAllMemtablesLiveDataSizeParams) (*GetAllCfAllMemtablesLiveDataSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCfAllMemtablesLiveDataSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_cf_all_memtables_live_data_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_live_data_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCfAllMemtablesLiveDataSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCfAllMemtablesLiveDataSizeOK), nil

}

/*
GetAllCfAllMemtablesOffHeapSize gets all cf all memtables off heap size

Get all memtables active and not of all column family off heap size
*/
func (a *Client) GetAllCfAllMemtablesOffHeapSize(params *GetAllCfAllMemtablesOffHeapSizeParams) (*GetAllCfAllMemtablesOffHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCfAllMemtablesOffHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_cf_all_memtables_off_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_off_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCfAllMemtablesOffHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCfAllMemtablesOffHeapSizeOK), nil

}

/*
GetAllCfAllMemtablesOnHeapSize gets all cf all memtables on heap size

Get all memtables active and not of all column family on heap size
*/
func (a *Client) GetAllCfAllMemtablesOnHeapSize(params *GetAllCfAllMemtablesOnHeapSizeParams) (*GetAllCfAllMemtablesOnHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCfAllMemtablesOnHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_cf_all_memtables_on_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_on_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCfAllMemtablesOnHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCfAllMemtablesOnHeapSizeOK), nil

}

/*
GetAllCompressionMetadataOffHeapMemoryUsed gets all compression metadata off heap memory used

Get all compression metadata off heap memory used
*/
func (a *Client) GetAllCompressionMetadataOffHeapMemoryUsed(params *GetAllCompressionMetadataOffHeapMemoryUsedParams) (*GetAllCompressionMetadataOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCompressionMetadataOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_compression_metadata_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_metadata_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCompressionMetadataOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCompressionMetadataOffHeapMemoryUsedOK), nil

}

/*
GetAllCompressionRatio gets all compression ratio

Get all compression ratio
*/
func (a *Client) GetAllCompressionRatio(params *GetAllCompressionRatioParams) (*GetAllCompressionRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCompressionRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_compression_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCompressionRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllCompressionRatioOK), nil

}

/*
GetAllDataFileLocations gets all data file locations

Get the list of all data file locations from conf
*/
func (a *Client) GetAllDataFileLocations(params *GetAllDataFileLocationsParams) (*GetAllDataFileLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDataFileLocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_data_file_locations",
		Method:             "GET",
		PathPattern:        "/storage_service/data_file/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDataFileLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllDataFileLocationsOK), nil

}

/*
GetAllEndpointStates gets all endpoint states

Get all endpoint states
*/
func (a *Client) GetAllEndpointStates(params *GetAllEndpointStatesParams) (*GetAllEndpointStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEndpointStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_endpoint_states",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoints/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEndpointStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllEndpointStatesOK), nil

}

/*
GetAllIndexSummaryOffHeapMemoryUsed gets all index summary off heap memory used

Get all index summary off heap memory used
*/
func (a *Client) GetAllIndexSummaryOffHeapMemoryUsed(params *GetAllIndexSummaryOffHeapMemoryUsedParams) (*GetAllIndexSummaryOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIndexSummaryOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_index_summary_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/index_summary_off_heap_memory_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIndexSummaryOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllIndexSummaryOffHeapMemoryUsedOK), nil

}

/*
GetAllLiveDiskSpaceUsed gets all live disk space used

Get all live disk space used
*/
func (a *Client) GetAllLiveDiskSpaceUsed(params *GetAllLiveDiskSpaceUsedParams) (*GetAllLiveDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllLiveDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_live_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllLiveDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllLiveDiskSpaceUsedOK), nil

}

/*
GetAllLiveSsTableCount gets all live ss table count

Get all live ss table count
*/
func (a *Client) GetAllLiveSsTableCount(params *GetAllLiveSsTableCountParams) (*GetAllLiveSsTableCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllLiveSsTableCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_live_ss_table_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_ss_table_count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllLiveSsTableCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllLiveSsTableCountOK), nil

}

/*
GetAllLoggerNames gets all logger names

Get all logger names
*/
func (a *Client) GetAllLoggerNames(params *GetAllLoggerNamesParams) (*GetAllLoggerNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllLoggerNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_logger_names",
		Method:             "GET",
		PathPattern:        "/system/logger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllLoggerNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllLoggerNamesOK), nil

}

/*
GetAllMaxRowSize gets all max row size

Get all max row size
*/
func (a *Client) GetAllMaxRowSize(params *GetAllMaxRowSizeParams) (*GetAllMaxRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMaxRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_max_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/max_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMaxRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMaxRowSizeOK), nil

}

/*
GetAllMeanRowSize gets all mean row size

Get all mean row size
*/
func (a *Client) GetAllMeanRowSize(params *GetAllMeanRowSizeParams) (*GetAllMeanRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMeanRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_mean_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/mean_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMeanRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMeanRowSizeOK), nil

}

/*
GetAllMemtableColumnsCount gets all memtable columns count

get all memtable columns count
*/
func (a *Client) GetAllMemtableColumnsCount(params *GetAllMemtableColumnsCountParams) (*GetAllMemtableColumnsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMemtableColumnsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_memtable_columns_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_columns_count/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMemtableColumnsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMemtableColumnsCountOK), nil

}

/*
GetAllMemtableLiveDataSize gets all memtable live data size

Get all active memtable of all column family live data size
*/
func (a *Client) GetAllMemtableLiveDataSize(params *GetAllMemtableLiveDataSizeParams) (*GetAllMemtableLiveDataSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMemtableLiveDataSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_memtable_live_data_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_live_data_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMemtableLiveDataSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMemtableLiveDataSizeOK), nil

}

/*
GetAllMemtableOffHeapSize gets all memtable off heap size

Get all active memtable of all column family off heap size
*/
func (a *Client) GetAllMemtableOffHeapSize(params *GetAllMemtableOffHeapSizeParams) (*GetAllMemtableOffHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMemtableOffHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_memtable_off_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_off_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMemtableOffHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMemtableOffHeapSizeOK), nil

}

/*
GetAllMemtableOnHeapSize gets all memtable on heap size

Get all active memtable of all column family on heap size
*/
func (a *Client) GetAllMemtableOnHeapSize(params *GetAllMemtableOnHeapSizeParams) (*GetAllMemtableOnHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMemtableOnHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_memtable_on_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_on_heap_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMemtableOnHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMemtableOnHeapSizeOK), nil

}

/*
GetAllMemtableSwitchCount gets all memtable switch count

Get all memtable switch count
*/
func (a *Client) GetAllMemtableSwitchCount(params *GetAllMemtableSwitchCountParams) (*GetAllMemtableSwitchCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMemtableSwitchCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_memtable_switch_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_switch_count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMemtableSwitchCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMemtableSwitchCountOK), nil

}

/*
GetAllMinRowSize gets all min row size

Get all min row size
*/
func (a *Client) GetAllMinRowSize(params *GetAllMinRowSizeParams) (*GetAllMinRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMinRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_min_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/min_row_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMinRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMinRowSizeOK), nil

}

/*
GetAllPendingCompactions gets all pending compactions

Get all pending compactions
*/
func (a *Client) GetAllPendingCompactions(params *GetAllPendingCompactionsParams) (*GetAllPendingCompactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPendingCompactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_pending_compactions",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_compactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPendingCompactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllPendingCompactionsOK), nil

}

/*
GetAllPendingFlushes gets all pending flushes

Get all pending flushes
*/
func (a *Client) GetAllPendingFlushes(params *GetAllPendingFlushesParams) (*GetAllPendingFlushesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPendingFlushesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_pending_flushes",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_flushes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPendingFlushesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllPendingFlushesOK), nil

}

/*
GetAllRangeLatency gets all range latency

Get all range latency
*/
func (a *Client) GetAllRangeLatency(params *GetAllRangeLatencyParams) (*GetAllRangeLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRangeLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_range_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRangeLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRangeLatencyOK), nil

}

/*
GetAllRead gets all read

Get number of reads from all column family, per shard
*/
func (a *Client) GetAllRead(params *GetAllReadParams) (*GetAllReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_read",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllReadOK), nil

}

/*
GetAllReadLatency gets all read latency

Get all read latency
*/
func (a *Client) GetAllReadLatency(params *GetAllReadLatencyParams) (*GetAllReadLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllReadLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_read_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllReadLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllReadLatencyOK), nil

}

/*
GetAllReadLatencyHistogram gets all read latency histogram

Get read latency moving avrage histogram from all column family
*/
func (a *Client) GetAllReadLatencyHistogram(params *GetAllReadLatencyHistogramParams) (*GetAllReadLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllReadLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_read_latency_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/moving_average_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllReadLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllReadLatencyHistogramOK), nil

}

/*
GetAllReadLatencyHistogramDepricated gets all read latency histogram depricated

Get read latency histogram from all column family
*/
func (a *Client) GetAllReadLatencyHistogramDepricated(params *GetAllReadLatencyHistogramDepricatedParams) (*GetAllReadLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllReadLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_read_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllReadLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllReadLatencyHistogramDepricatedOK), nil

}

/*
GetAllRecentBloomFilterFalsePositives gets all recent bloom filter false positives

Get all recent bloom filter false positives
*/
func (a *Client) GetAllRecentBloomFilterFalsePositives(params *GetAllRecentBloomFilterFalsePositivesParams) (*GetAllRecentBloomFilterFalsePositivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRecentBloomFilterFalsePositivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_recent_bloom_filter_false_positives",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_positives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRecentBloomFilterFalsePositivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRecentBloomFilterFalsePositivesOK), nil

}

/*
GetAllRecentBloomFilterFalseRatio gets all recent bloom filter false ratio

Get all recent bloom filter false ratio
*/
func (a *Client) GetAllRecentBloomFilterFalseRatio(params *GetAllRecentBloomFilterFalseRatioParams) (*GetAllRecentBloomFilterFalseRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRecentBloomFilterFalseRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_recent_bloom_filter_false_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_ratio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRecentBloomFilterFalseRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRecentBloomFilterFalseRatioOK), nil

}

/*
GetAllRowCacheHit gets all row cache hit

Get all row cache hit
*/
func (a *Client) GetAllRowCacheHit(params *GetAllRowCacheHitParams) (*GetAllRowCacheHitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRowCacheHitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_row_cache_hit",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRowCacheHitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRowCacheHitOK), nil

}

/*
GetAllRowCacheHitOutOfRange gets all row cache hit out of range

Get all row cache hit out of range
*/
func (a *Client) GetAllRowCacheHitOutOfRange(params *GetAllRowCacheHitOutOfRangeParams) (*GetAllRowCacheHitOutOfRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRowCacheHitOutOfRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_row_cache_hit_out_of_range",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit_out_of_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRowCacheHitOutOfRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRowCacheHitOutOfRangeOK), nil

}

/*
GetAllRowCacheMiss gets all row cache miss

Get all row cache miss
*/
func (a *Client) GetAllRowCacheMiss(params *GetAllRowCacheMissParams) (*GetAllRowCacheMissOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRowCacheMissParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_row_cache_miss",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_miss",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRowCacheMissReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRowCacheMissOK), nil

}

/*
GetAllSpeculativeRetries gets all speculative retries

Get all speculative retries
*/
func (a *Client) GetAllSpeculativeRetries(params *GetAllSpeculativeRetriesParams) (*GetAllSpeculativeRetriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSpeculativeRetriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_speculative_retries",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/speculative_retries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSpeculativeRetriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSpeculativeRetriesOK), nil

}

/*
GetAllTotalDiskSpaceUsed gets all total disk space used

Get all total disk space used
*/
func (a *Client) GetAllTotalDiskSpaceUsed(params *GetAllTotalDiskSpaceUsedParams) (*GetAllTotalDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTotalDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_total_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/total_disk_space_used",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTotalDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTotalDiskSpaceUsedOK), nil

}

/*
GetAllTotalIncomingBytes gets all total incoming bytes

Get all total incoming bytes
*/
func (a *Client) GetAllTotalIncomingBytes(params *GetAllTotalIncomingBytesParams) (*GetAllTotalIncomingBytesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTotalIncomingBytesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_total_incoming_bytes",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/incoming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTotalIncomingBytesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTotalIncomingBytesOK), nil

}

/*
GetAllTotalOutgoingBytes gets all total outgoing bytes

Get all total outgoing bytes
*/
func (a *Client) GetAllTotalOutgoingBytes(params *GetAllTotalOutgoingBytesParams) (*GetAllTotalOutgoingBytesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTotalOutgoingBytesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_total_outgoing_bytes",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outgoing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTotalOutgoingBytesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTotalOutgoingBytesOK), nil

}

/*
GetAllTrueSnapshotsSize gets all true snapshots size

Get all true snapshots size
*/
func (a *Client) GetAllTrueSnapshotsSize(params *GetAllTrueSnapshotsSizeParams) (*GetAllTrueSnapshotsSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTrueSnapshotsSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_true_snapshots_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/true_snapshots_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTrueSnapshotsSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTrueSnapshotsSizeOK), nil

}

/*
GetAllWrite gets all write

Get number of writes from all column family, per shard
*/
func (a *Client) GetAllWrite(params *GetAllWriteParams) (*GetAllWriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_write",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllWriteOK), nil

}

/*
GetAllWriteLatency gets all write latency

Get all write latency
*/
func (a *Client) GetAllWriteLatency(params *GetAllWriteLatencyParams) (*GetAllWriteLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWriteLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_write_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWriteLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllWriteLatencyOK), nil

}

/*
GetAllWriteLatencyHistogram gets all write latency histogram

Get write latency moving average histogram of all column family
*/
func (a *Client) GetAllWriteLatencyHistogram(params *GetAllWriteLatencyHistogramParams) (*GetAllWriteLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWriteLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_write_latency_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/moving_average_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWriteLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllWriteLatencyHistogramOK), nil

}

/*
GetAllWriteLatencyHistogramDepricated gets all write latency histogram depricated

Get write latency histogram of all column family
*/
func (a *Client) GetAllWriteLatencyHistogramDepricated(params *GetAllWriteLatencyHistogramDepricatedParams) (*GetAllWriteLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWriteLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_all_write_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWriteLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllWriteLatencyHistogramDepricatedOK), nil

}

/*
GetArchivingSegmentNames gets archiving segment names

Returns files which are pending for archival attempt. Does NOT include failed archive attempts
*/
func (a *Client) GetArchivingSegmentNames(params *GetArchivingSegmentNamesParams) (*GetArchivingSegmentNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArchivingSegmentNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_archiving_segment_names",
		Method:             "GET",
		PathPattern:        "/commitlog/segments/archiving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArchivingSegmentNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArchivingSegmentNamesOK), nil

}

/*
GetBatchSizeFailureThreshold gets batch size failure threshold

Returns the threshold for rejecting queries due to a large batch size
*/
func (a *Client) GetBatchSizeFailureThreshold(params *GetBatchSizeFailureThresholdParams) (*GetBatchSizeFailureThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchSizeFailureThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_batch_size_failure_threshold",
		Method:             "GET",
		PathPattern:        "/storage_service/batch_size_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBatchSizeFailureThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBatchSizeFailureThresholdOK), nil

}

/*
GetBloomFilterDiskSpaceUsed gets bloom filter disk space used

Get bloom filter disk space used
*/
func (a *Client) GetBloomFilterDiskSpaceUsed(params *GetBloomFilterDiskSpaceUsedParams) (*GetBloomFilterDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBloomFilterDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_bloom_filter_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBloomFilterDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBloomFilterDiskSpaceUsedOK), nil

}

/*
GetBloomFilterFalsePositives gets bloom filter false positives

Get bloom filter false positives
*/
func (a *Client) GetBloomFilterFalsePositives(params *GetBloomFilterFalsePositivesParams) (*GetBloomFilterFalsePositivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBloomFilterFalsePositivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_bloom_filter_false_positives",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_positives/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBloomFilterFalsePositivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBloomFilterFalsePositivesOK), nil

}

/*
GetBloomFilterFalseRatio gets bloom filter false ratio

Get bloom filter false ratio
*/
func (a *Client) GetBloomFilterFalseRatio(params *GetBloomFilterFalseRatioParams) (*GetBloomFilterFalseRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBloomFilterFalseRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_bloom_filter_false_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_false_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBloomFilterFalseRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBloomFilterFalseRatioOK), nil

}

/*
GetBloomFilterOffHeapMemoryUsed gets bloom filter off heap memory used

Get bloom filter off heap memory used
*/
func (a *Client) GetBloomFilterOffHeapMemoryUsed(params *GetBloomFilterOffHeapMemoryUsedParams) (*GetBloomFilterOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBloomFilterOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_bloom_filter_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/bloom_filter_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBloomFilterOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBloomFilterOffHeapMemoryUsedOK), nil

}

/*
GetBuiltIndexes gets built indexes

Returns a list of the names of the built column indexes for current store
*/
func (a *Client) GetBuiltIndexes(params *GetBuiltIndexesParams) (*GetBuiltIndexesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuiltIndexesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_built_indexes",
		Method:             "GET",
		PathPattern:        "/column_family/built_indexes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuiltIndexesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuiltIndexesOK), nil

}

/*
GetBytesCompacted gets bytes compacted

Get bytes compacted
*/
func (a *Client) GetBytesCompacted(params *GetBytesCompactedParams) (*GetBytesCompactedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBytesCompactedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_bytes_compacted",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/bytes_compacted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBytesCompactedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBytesCompactedOK), nil

}

/*
GetCasCommit gets cas commit

Get cas commit
*/
func (a *Client) GetCasCommit(params *GetCasCommitParams) (*GetCasCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_commit",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasCommitOK), nil

}

/*
GetCasCommitEstimatedHistogram gets cas commit estimated histogram

Get cas commit
*/
func (a *Client) GetCasCommitEstimatedHistogram(params *GetCasCommitEstimatedHistogramParams) (*GetCasCommitEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasCommitEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_commit_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasCommitEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasCommitEstimatedHistogramOK), nil

}

/*
GetCasCommitEstimatedRecentHistogram gets cas commit estimated recent histogram

Get cas commit
*/
func (a *Client) GetCasCommitEstimatedRecentHistogram(params *GetCasCommitEstimatedRecentHistogramParams) (*GetCasCommitEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasCommitEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_commit_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_commit/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasCommitEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasCommitEstimatedRecentHistogramOK), nil

}

/*
GetCasContentionTimeout gets cas contention timeout

Get CAS contention timeout in seconds
*/
func (a *Client) GetCasContentionTimeout(params *GetCasContentionTimeoutParams) (*GetCasContentionTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasContentionTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_contention_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/cas_contention_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasContentionTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasContentionTimeoutOK), nil

}

/*
GetCasPrepare gets cas prepare

Get cas prepare
*/
func (a *Client) GetCasPrepare(params *GetCasPrepareParams) (*GetCasPrepareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasPrepareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_prepare",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasPrepareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasPrepareOK), nil

}

/*
GetCasPrepareEstimatedHistogram gets cas prepare estimated histogram

Get cas prepare
*/
func (a *Client) GetCasPrepareEstimatedHistogram(params *GetCasPrepareEstimatedHistogramParams) (*GetCasPrepareEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasPrepareEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_prepare_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasPrepareEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasPrepareEstimatedHistogramOK), nil

}

/*
GetCasPrepareEstimatedRecentHistogram gets cas prepare estimated recent histogram

Get cas prepare
*/
func (a *Client) GetCasPrepareEstimatedRecentHistogram(params *GetCasPrepareEstimatedRecentHistogramParams) (*GetCasPrepareEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasPrepareEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_prepare_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_prepare/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasPrepareEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasPrepareEstimatedRecentHistogramOK), nil

}

/*
GetCasPropose gets cas propose

Get cas propose
*/
func (a *Client) GetCasPropose(params *GetCasProposeParams) (*GetCasProposeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasProposeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_propose",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasProposeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasProposeOK), nil

}

/*
GetCasProposeEstimatedHistogram gets cas propose estimated histogram

Get cas propose
*/
func (a *Client) GetCasProposeEstimatedHistogram(params *GetCasProposeEstimatedHistogramParams) (*GetCasProposeEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasProposeEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_propose_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasProposeEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasProposeEstimatedHistogramOK), nil

}

/*
GetCasProposeEstimatedRecentHistogram gets cas propose estimated recent histogram

Get cas propose
*/
func (a *Client) GetCasProposeEstimatedRecentHistogram(params *GetCasProposeEstimatedRecentHistogramParams) (*GetCasProposeEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasProposeEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_propose_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/cas_propose/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasProposeEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasProposeEstimatedRecentHistogramOK), nil

}

/*
GetCasReadMetricsConditionNotMet gets cas read metrics condition not met

Get cas read metrics
*/
func (a *Client) GetCasReadMetricsConditionNotMet(params *GetCasReadMetricsConditionNotMetParams) (*GetCasReadMetricsConditionNotMetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasReadMetricsConditionNotMetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_read_metrics_condition_not_met",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/condition_not_met",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasReadMetricsConditionNotMetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasReadMetricsConditionNotMetOK), nil

}

/*
GetCasReadMetricsContention gets cas read metrics contention

Get cas read metrics
*/
func (a *Client) GetCasReadMetricsContention(params *GetCasReadMetricsContentionParams) (*GetCasReadMetricsContentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasReadMetricsContentionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_read_metrics_contention",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/contention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasReadMetricsContentionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasReadMetricsContentionOK), nil

}

/*
GetCasReadMetricsUnfinishedCommit gets cas read metrics unfinished commit

Get cas read metrics
*/
func (a *Client) GetCasReadMetricsUnfinishedCommit(params *GetCasReadMetricsUnfinishedCommitParams) (*GetCasReadMetricsUnfinishedCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasReadMetricsUnfinishedCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_read_metrics_unfinished_commit",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/unfinished_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasReadMetricsUnfinishedCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasReadMetricsUnfinishedCommitOK), nil

}

/*
GetCasReadTimeouts gets cas read timeouts

Get CAS read timeout
*/
func (a *Client) GetCasReadTimeouts(params *GetCasReadTimeoutsParams) (*GetCasReadTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasReadTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_read_timeouts",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasReadTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasReadTimeoutsOK), nil

}

/*
GetCasReadUnavailables gets cas read unavailables

Get CAS read unavailables
*/
func (a *Client) GetCasReadUnavailables(params *GetCasReadUnavailablesParams) (*GetCasReadUnavailablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasReadUnavailablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_read_unavailables",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_read/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasReadUnavailablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasReadUnavailablesOK), nil

}

/*
GetCasWriteMetricsConditionNotMet gets cas write metrics condition not met

Get cas write metrics
*/
func (a *Client) GetCasWriteMetricsConditionNotMet(params *GetCasWriteMetricsConditionNotMetParams) (*GetCasWriteMetricsConditionNotMetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasWriteMetricsConditionNotMetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_write_metrics_condition_not_met",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/condition_not_met",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasWriteMetricsConditionNotMetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasWriteMetricsConditionNotMetOK), nil

}

/*
GetCasWriteMetricsContention gets cas write metrics contention

Get cas write metrics
*/
func (a *Client) GetCasWriteMetricsContention(params *GetCasWriteMetricsContentionParams) (*GetCasWriteMetricsContentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasWriteMetricsContentionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_write_metrics_contention",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/contention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasWriteMetricsContentionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasWriteMetricsContentionOK), nil

}

/*
GetCasWriteMetricsUnfinishedCommit gets cas write metrics unfinished commit

Get cas write metrics
*/
func (a *Client) GetCasWriteMetricsUnfinishedCommit(params *GetCasWriteMetricsUnfinishedCommitParams) (*GetCasWriteMetricsUnfinishedCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasWriteMetricsUnfinishedCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_write_metrics_unfinished_commit",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/unfinished_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasWriteMetricsUnfinishedCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasWriteMetricsUnfinishedCommitOK), nil

}

/*
GetCasWriteTimeouts gets cas write timeouts

Get CAS write timeout
*/
func (a *Client) GetCasWriteTimeouts(params *GetCasWriteTimeoutsParams) (*GetCasWriteTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasWriteTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_write_timeouts",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasWriteTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasWriteTimeoutsOK), nil

}

/*
GetCasWriteUnavailables gets cas write unavailables

Get CAS write unavailables
*/
func (a *Client) GetCasWriteUnavailables(params *GetCasWriteUnavailablesParams) (*GetCasWriteUnavailablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCasWriteUnavailablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cas_write_unavailables",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/cas_write/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCasWriteUnavailablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCasWriteUnavailablesOK), nil

}

/*
GetCfAllMemtablesLiveDataSize gets cf all memtables live data size

Get all of the column family active and not memtables live data size
*/
func (a *Client) GetCfAllMemtablesLiveDataSize(params *GetCfAllMemtablesLiveDataSizeParams) (*GetCfAllMemtablesLiveDataSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCfAllMemtablesLiveDataSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cf_all_memtables_live_data_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_live_data_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCfAllMemtablesLiveDataSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCfAllMemtablesLiveDataSizeOK), nil

}

/*
GetCfAllMemtablesOffHeapSize gets cf all memtables off heap size

Get all of the column family active and not memtables off heap size
*/
func (a *Client) GetCfAllMemtablesOffHeapSize(params *GetCfAllMemtablesOffHeapSizeParams) (*GetCfAllMemtablesOffHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCfAllMemtablesOffHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cf_all_memtables_off_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_off_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCfAllMemtablesOffHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCfAllMemtablesOffHeapSizeOK), nil

}

/*
GetCfAllMemtablesOnHeapSize gets cf all memtables on heap size

Get all of the column family active and not memtables on heap size
*/
func (a *Client) GetCfAllMemtablesOnHeapSize(params *GetCfAllMemtablesOnHeapSizeParams) (*GetCfAllMemtablesOnHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCfAllMemtablesOnHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cf_all_memtables_on_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/all_memtables_on_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCfAllMemtablesOnHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCfAllMemtablesOnHeapSizeOK), nil

}

/*
GetClusterName gets cluster name

Returns the name of the cluster
*/
func (a *Client) GetClusterName(params *GetClusterNameParams) (*GetClusterNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_cluster_name",
		Method:             "GET",
		PathPattern:        "/storage_service/cluster_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterNameOK), nil

}

/*
GetColUpdateTimeDeltaHistogram gets col update time delta histogram

Get col update time delta histogram
*/
func (a *Client) GetColUpdateTimeDeltaHistogram(params *GetColUpdateTimeDeltaHistogramParams) (*GetColUpdateTimeDeltaHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetColUpdateTimeDeltaHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_col_update_time_delta_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/col_update_time_delta_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetColUpdateTimeDeltaHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetColUpdateTimeDeltaHistogramOK), nil

}

/*
GetCollectd gets collectd

Get a collectd value
*/
func (a *Client) GetCollectd(params *GetCollectdParams) (*GetCollectdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_collectd",
		Method:             "GET",
		PathPattern:        "/collectd/{pluginid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCollectdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectdOK), nil

}

/*
GetCollectdItems gets collectd items

Get a list of all collectd metrics and their status
*/
func (a *Client) GetCollectdItems(params *GetCollectdItemsParams) (*GetCollectdItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectdItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_collectd_items",
		Method:             "GET",
		PathPattern:        "/collectd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCollectdItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectdItemsOK), nil

}

/*
GetColumnFamily gets column family

Get a list of all column family info
*/
func (a *Client) GetColumnFamily(params *GetColumnFamilyParams) (*GetColumnFamilyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetColumnFamilyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_column_family",
		Method:             "GET",
		PathPattern:        "/column_family/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetColumnFamilyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetColumnFamilyOK), nil

}

/*
GetColumnFamilyName gets column family name

Get a list of all column family names
*/
func (a *Client) GetColumnFamilyName(params *GetColumnFamilyNameParams) (*GetColumnFamilyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetColumnFamilyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_column_family_name",
		Method:             "GET",
		PathPattern:        "/column_family/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetColumnFamilyNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetColumnFamilyNameOK), nil

}

/*
GetColumnFamilyNameKeyspace gets column family name keyspace

Get a list of the key space names
*/
func (a *Client) GetColumnFamilyNameKeyspace(params *GetColumnFamilyNameKeyspaceParams) (*GetColumnFamilyNameKeyspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetColumnFamilyNameKeyspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_column_family_name_keyspace",
		Method:             "GET",
		PathPattern:        "/column_family/name/keyspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetColumnFamilyNameKeyspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetColumnFamilyNameKeyspaceOK), nil

}

/*
GetCommitlog gets commitlog

Returns the location of the commit log files
*/
func (a *Client) GetCommitlog(params *GetCommitlogParams) (*GetCommitlogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommitlogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_commitlog",
		Method:             "GET",
		PathPattern:        "/storage_service/commitlog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommitlogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommitlogOK), nil

}

/*
GetCompactionHistory gets compaction history

get List of the compaction history
*/
func (a *Client) GetCompactionHistory(params *GetCompactionHistoryParams) (*GetCompactionHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactionHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compaction_history",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compaction_history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactionHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompactionHistoryOK), nil

}

/*
GetCompactionInfo gets compaction info

get a list of all active compaction info
*/
func (a *Client) GetCompactionInfo(params *GetCompactionInfoParams) (*GetCompactionInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactionInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compaction_info",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compaction_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactionInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompactionInfoOK), nil

}

/*
GetCompactionStrategyClass gets compaction strategy class

Gets the compaction strategy class name
*/
func (a *Client) GetCompactionStrategyClass(params *GetCompactionStrategyClassParams) (*GetCompactionStrategyClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactionStrategyClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compaction_strategy_class",
		Method:             "GET",
		PathPattern:        "/column_family/compaction_strategy/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactionStrategyClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompactionStrategyClassOK), nil

}

/*
GetCompactionThroughputMbPerSec gets compaction throughput mb per sec

get compaction throughput mb per sec
*/
func (a *Client) GetCompactionThroughputMbPerSec(params *GetCompactionThroughputMbPerSecParams) (*GetCompactionThroughputMbPerSecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactionThroughputMbPerSecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compaction_throughput_mb_per_sec",
		Method:             "GET",
		PathPattern:        "/storage_service/compaction_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactionThroughputMbPerSecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompactionThroughputMbPerSecOK), nil

}

/*
GetCompactions gets compactions

get List of running compactions
*/
func (a *Client) GetCompactions(params *GetCompactionsParams) (*GetCompactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compactions",
		Method:             "GET",
		PathPattern:        "/compaction_manager/compactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompactionsOK), nil

}

/*
GetCompletedMessages gets completed messages

Get the number of replied messages
*/
func (a *Client) GetCompletedMessages(params *GetCompletedMessagesParams) (*GetCompletedMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompletedMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_completed_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/replied",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompletedMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompletedMessagesOK), nil

}

/*
GetCompletedTasks gets completed tasks

Get completed tasks
*/
func (a *Client) GetCompletedTasks(params *GetCompletedTasksParams) (*GetCompletedTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompletedTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_completed_tasks",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/completed_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompletedTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompletedTasksOK), nil

}

/*
GetCompletedTasks1 gets completed tasks1

Get completed tasks
*/
func (a *Client) GetCompletedTasks1(params *GetCompletedTasks1Params) (*GetCompletedTasks1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompletedTasks1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_completed_tasks1",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/completed_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompletedTasks1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompletedTasks1OK), nil

}

/*
GetCompressionMetadataOffHeapMemoryUsed gets compression metadata off heap memory used

Get compression metadata off heap memory used
*/
func (a *Client) GetCompressionMetadataOffHeapMemoryUsed(params *GetCompressionMetadataOffHeapMemoryUsedParams) (*GetCompressionMetadataOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompressionMetadataOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compression_metadata_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_metadata_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompressionMetadataOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompressionMetadataOffHeapMemoryUsedOK), nil

}

/*
GetCompressionParameters gets compression parameters

get the compression parameters
*/
func (a *Client) GetCompressionParameters(params *GetCompressionParametersParams) (*GetCompressionParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompressionParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compression_parameters",
		Method:             "GET",
		PathPattern:        "/column_family/compression_parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompressionParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompressionParametersOK), nil

}

/*
GetCompressionRatio gets compression ratio

Get compression ratio
*/
func (a *Client) GetCompressionRatio(params *GetCompressionRatioParams) (*GetCompressionRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompressionRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_compression_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/compression_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompressionRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompressionRatioOK), nil

}

/*
GetCoordinatorReadLatency gets coordinator read latency

Get coordinator read latency
*/
func (a *Client) GetCoordinatorReadLatency(params *GetCoordinatorReadLatencyParams) (*GetCoordinatorReadLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoordinatorReadLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_coordinator_read_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/coordinator/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCoordinatorReadLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCoordinatorReadLatencyOK), nil

}

/*
GetCoordinatorScanLatency gets coordinator scan latency

Get coordinator scan latency
*/
func (a *Client) GetCoordinatorScanLatency(params *GetCoordinatorScanLatencyParams) (*GetCoordinatorScanLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoordinatorScanLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_coordinator_scan_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/coordinator/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCoordinatorScanLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCoordinatorScanLatencyOK), nil

}

/*
GetCounterCacheKeysToSave1 gets counter cache keys to save1

get counter cache keys to save
*/
func (a *Client) GetCounterCacheKeysToSave1(params *GetCounterCacheKeysToSave1Params) (*GetCounterCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_cache_keys_to_save1",
		Method:             "GET",
		PathPattern:        "/cache_service/counter_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterCacheKeysToSave1OK), nil

}

/*
GetCounterCacheSavePeriodInSeconds1 gets counter cache save period in seconds1

get counter cache save period in seconds
*/
func (a *Client) GetCounterCacheSavePeriodInSeconds1(params *GetCounterCacheSavePeriodInSeconds1Params) (*GetCounterCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_cache_save_period_in_seconds1",
		Method:             "GET",
		PathPattern:        "/cache_service/counter_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterCacheSavePeriodInSeconds1OK), nil

}

/*
GetCounterCapacity1 gets counter capacity1

Get counter capacity
*/
func (a *Client) GetCounterCapacity1(params *GetCounterCapacity1Params) (*GetCounterCapacity1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterCapacity1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_capacity1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterCapacity1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterCapacity1OK), nil

}

/*
GetCounterEntries1 gets counter entries1

Get counter entries
*/
func (a *Client) GetCounterEntries1(params *GetCounterEntries1Params) (*GetCounterEntries1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterEntries1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_entries1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterEntries1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterEntries1OK), nil

}

/*
GetCounterHitRate1 gets counter hit rate1

Get counter hit rate
*/
func (a *Client) GetCounterHitRate1(params *GetCounterHitRate1Params) (*GetCounterHitRate1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterHitRate1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_hit_rate1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterHitRate1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterHitRate1OK), nil

}

/*
GetCounterHits1 gets counter hits1

Get counter hits
*/
func (a *Client) GetCounterHits1(params *GetCounterHits1Params) (*GetCounterHits1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterHits1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_hits1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterHits1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterHits1OK), nil

}

/*
GetCounterHitsMovingAvrage1 gets counter hits moving avrage1

Get counter hits moving avrage
*/
func (a *Client) GetCounterHitsMovingAvrage1(params *GetCounterHitsMovingAvrage1Params) (*GetCounterHitsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterHitsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_hits_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterHitsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterHitsMovingAvrage1OK), nil

}

/*
GetCounterRequests1 gets counter requests1

Get counter requests
*/
func (a *Client) GetCounterRequests1(params *GetCounterRequests1Params) (*GetCounterRequests1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterRequests1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_requests1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterRequests1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterRequests1OK), nil

}

/*
GetCounterRequestsMovingAvrage1 gets counter requests moving avrage1

Get counter requests moving avrage
*/
func (a *Client) GetCounterRequestsMovingAvrage1(params *GetCounterRequestsMovingAvrage1Params) (*GetCounterRequestsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterRequestsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_requests_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterRequestsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterRequestsMovingAvrage1OK), nil

}

/*
GetCounterSize1 gets counter size1

Get counter cache waited size
*/
func (a *Client) GetCounterSize1(params *GetCounterSize1Params) (*GetCounterSize1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterSize1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_size1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/counter/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterSize1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterSize1OK), nil

}

/*
GetCounterWriteRPCTimeout gets counter write rpc timeout

Get counter write rpc timeout in seconds
*/
func (a *Client) GetCounterWriteRPCTimeout(params *GetCounterWriteRPCTimeoutParams) (*GetCounterWriteRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCounterWriteRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_counter_write_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/counter_write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCounterWriteRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCounterWriteRPCTimeoutOK), nil

}

/*
GetCreateHintCount gets create hint count

Get create hint count
*/
func (a *Client) GetCreateHintCount(params *GetCreateHintCountParams) (*GetCreateHintCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreateHintCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_create_hint_count",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/metrics/create_hint/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreateHintCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreateHintCountOK), nil

}

/*
GetCurrentGenerationNumber gets current generation number

Returns files which are pending for archival attempt. Does NOT include failed archive attempts
*/
func (a *Client) GetCurrentGenerationNumber(params *GetCurrentGenerationNumberParams) (*GetCurrentGenerationNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentGenerationNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_current_generation_number",
		Method:             "GET",
		PathPattern:        "/gossiper/generation_number/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentGenerationNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentGenerationNumberOK), nil

}

/*
GetCurrentGenerationNumber1 gets current generation number

Return the generation value for this node.
*/
func (a *Client) GetCurrentGenerationNumber1(params *GetCurrentGenerationNumber1Params) (*GetCurrentGenerationNumber1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentGenerationNumber1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_current_generation_number1",
		Method:             "GET",
		PathPattern:        "/storage_service/generation_number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentGenerationNumber1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentGenerationNumber1OK), nil

}

/*
GetCurrentHeartBeatVersion gets current heart beat version

Get heart beat version for a node
*/
func (a *Client) GetCurrentHeartBeatVersion(params *GetCurrentHeartBeatVersionParams) (*GetCurrentHeartBeatVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentHeartBeatVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_current_heart_beat_version",
		Method:             "GET",
		PathPattern:        "/gossiper/heart_beat_version/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentHeartBeatVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentHeartBeatVersionOK), nil

}

/*
GetCurrentStreams gets current streams

Returns the current state of all ongoing streams.
*/
func (a *Client) GetCurrentStreams(params *GetCurrentStreamsParams) (*GetCurrentStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentStreamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_current_streams",
		Method:             "GET",
		PathPattern:        "/stream_manager/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentStreamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentStreamsOK), nil

}

/*
GetDatacenter gets datacenter

Provides the Datacenter name depending on the respective snitch used, given the hostname/ip
*/
func (a *Client) GetDatacenter(params *GetDatacenterParams) (*GetDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatacenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_datacenter",
		Method:             "GET",
		PathPattern:        "/snitch/datacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatacenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatacenterOK), nil

}

/*
GetDownEndpoint gets down endpoint

Get the addreses of the down endpoints
*/
func (a *Client) GetDownEndpoint(params *GetDownEndpointParams) (*GetDownEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDownEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_down_endpoint",
		Method:             "GET",
		PathPattern:        "/gossiper/endpoint/down/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDownEndpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDownEndpointOK), nil

}

/*
GetDownEndpointCount gets down endpoint count

Get count down endpoint
*/
func (a *Client) GetDownEndpointCount(params *GetDownEndpointCountParams) (*GetDownEndpointCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDownEndpointCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_down_endpoint_count",
		Method:             "GET",
		PathPattern:        "/failure_detector/count/endpoint/down",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDownEndpointCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDownEndpointCountOK), nil

}

/*
GetDrainProgress gets drain progress

Get the progress of a drain operation
*/
func (a *Client) GetDrainProgress(params *GetDrainProgressParams) (*GetDrainProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDrainProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_drain_progress",
		Method:             "GET",
		PathPattern:        "/storage_service/drain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDrainProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDrainProgressOK), nil

}

/*
GetDroppableTombstoneRatio gets droppable tombstone ratio

Get the ratio of droppable tombstones to real columns (and non-droppable tombstones)
*/
func (a *Client) GetDroppableTombstoneRatio(params *GetDroppableTombstoneRatioParams) (*GetDroppableTombstoneRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDroppableTombstoneRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_droppable_tombstone_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/droppable_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDroppableTombstoneRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDroppableTombstoneRatioOK), nil

}

/*
GetDroppedMessages gets dropped messages

Get the number of messages that were dropped before sending
*/
func (a *Client) GetDroppedMessages(params *GetDroppedMessagesParams) (*GetDroppedMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDroppedMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_dropped_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/dropped",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDroppedMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDroppedMessagesOK), nil

}

/*
GetDroppedMessagesByVer gets dropped messages by ver

Get the number of dropped messages per verb
*/
func (a *Client) GetDroppedMessagesByVer(params *GetDroppedMessagesByVerParams) (*GetDroppedMessagesByVerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDroppedMessagesByVerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_dropped_messages_by_ver",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/dropped_by_ver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDroppedMessagesByVerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDroppedMessagesByVerOK), nil

}

/*
GetEffectiveOwnership gets effective ownership

Effective ownership is % of the data each node owns given the keyspace
*/
func (a *Client) GetEffectiveOwnership(params *GetEffectiveOwnershipParams) (*GetEffectiveOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEffectiveOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_effective_ownership",
		Method:             "GET",
		PathPattern:        "/storage_service/ownership/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEffectiveOwnershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEffectiveOwnershipOK), nil

}

/*
GetEndpointDowntime gets endpoint downtime

Get the downtime of an end point
*/
func (a *Client) GetEndpointDowntime(params *GetEndpointDowntimeParams) (*GetEndpointDowntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointDowntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_endpoint_downtime",
		Method:             "GET",
		PathPattern:        "/gossiper/downtime/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEndpointDowntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEndpointDowntimeOK), nil

}

/*
GetEndpointPhiValues gets endpoint phi values

Get end point phi values
*/
func (a *Client) GetEndpointPhiValues(params *GetEndpointPhiValuesParams) (*GetEndpointPhiValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointPhiValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_endpoint_phi_values",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoint_phi_values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEndpointPhiValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEndpointPhiValuesOK), nil

}

/*
GetEndpointState gets endpoint state

Get endpoint states
*/
func (a *Client) GetEndpointState(params *GetEndpointStateParams) (*GetEndpointStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndpointStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_endpoint_state",
		Method:             "GET",
		PathPattern:        "/failure_detector/endpoints/states/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEndpointStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEndpointStateOK), nil

}

/*
GetEstimatedColumnCountHistogram gets estimated column count histogram

Get estimated column count histogram
*/
func (a *Client) GetEstimatedColumnCountHistogram(params *GetEstimatedColumnCountHistogramParams) (*GetEstimatedColumnCountHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEstimatedColumnCountHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_estimated_column_count_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_column_count_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEstimatedColumnCountHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEstimatedColumnCountHistogramOK), nil

}

/*
GetEstimatedRowCount gets estimated row count

Get estimated row count
*/
func (a *Client) GetEstimatedRowCount(params *GetEstimatedRowCountParams) (*GetEstimatedRowCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEstimatedRowCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_estimated_row_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_row_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEstimatedRowCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEstimatedRowCountOK), nil

}

/*
GetEstimatedRowSizeHistogram gets estimated row size histogram

Get estimated row size histogram
*/
func (a *Client) GetEstimatedRowSizeHistogram(params *GetEstimatedRowSizeHistogramParams) (*GetEstimatedRowSizeHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEstimatedRowSizeHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_estimated_row_size_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/estimated_row_size_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEstimatedRowSizeHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEstimatedRowSizeHistogramOK), nil

}

/*
GetExceptionMessages gets exception messages

Get the number of messages return with an exception
*/
func (a *Client) GetExceptionMessages(params *GetExceptionMessagesParams) (*GetExceptionMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExceptionMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_exception_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/exception",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExceptionMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExceptionMessagesOK), nil

}

/*
GetExceptions gets exceptions

Get exceptions
*/
func (a *Client) GetExceptions(params *GetExceptionsParams) (*GetExceptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExceptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_exceptions",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/exceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExceptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExceptionsOK), nil

}

/*
GetHintedHandoffEnabled gets hinted handoff enabled

Return true if hinted handoff enabled
*/
func (a *Client) GetHintedHandoffEnabled(params *GetHintedHandoffEnabledParams) (*GetHintedHandoffEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHintedHandoffEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_hinted_handoff_enabled",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHintedHandoffEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHintedHandoffEnabledOK), nil

}

/*
GetHintedHandoffEnabledByDc gets hinted handoff enabled by dc

Get the hinted handoff enabled by dc
*/
func (a *Client) GetHintedHandoffEnabledByDc(params *GetHintedHandoffEnabledByDcParams) (*GetHintedHandoffEnabledByDcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHintedHandoffEnabledByDcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_hinted_handoff_enabled_by_dc",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled_by_dc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHintedHandoffEnabledByDcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHintedHandoffEnabledByDcOK), nil

}

/*
GetHintsInProgress gets hints in progress

get hints in progress
*/
func (a *Client) GetHintsInProgress(params *GetHintsInProgressParams) (*GetHintsInProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHintsInProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_hints_in_progress",
		Method:             "GET",
		PathPattern:        "/storage_proxy/hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHintsInProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHintsInProgressOK), nil

}

/*
GetHostIDMap gets host id map

Retrieve the mapping of endpoint to host ID
*/
func (a *Client) GetHostIDMap(params *GetHostIDMapParams) (*GetHostIDMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostIDMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_host_id_map",
		Method:             "GET",
		PathPattern:        "/storage_service/host_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostIDMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHostIDMapOK), nil

}

/*
GetIndexSummaryOffHeapMemoryUsed gets index summary off heap memory used

Get index summary off heap memory used
*/
func (a *Client) GetIndexSummaryOffHeapMemoryUsed(params *GetIndexSummaryOffHeapMemoryUsedParams) (*GetIndexSummaryOffHeapMemoryUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIndexSummaryOffHeapMemoryUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_index_summary_off_heap_memory_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/index_summary_off_heap_memory_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIndexSummaryOffHeapMemoryUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIndexSummaryOffHeapMemoryUsedOK), nil

}

/*
GetJoiningNodes gets joining nodes

Retrieve the list of nodes currently bootstrapping into the ring
*/
func (a *Client) GetJoiningNodes(params *GetJoiningNodesParams) (*GetJoiningNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJoiningNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_joining_nodes",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/joining",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJoiningNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJoiningNodesOK), nil

}

/*
GetKeyCacheHitRate gets key cache hit rate

Get key cache hit rate
*/
func (a *Client) GetKeyCacheHitRate(params *GetKeyCacheHitRateParams) (*GetKeyCacheHitRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyCacheHitRateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_cache_hit_rate",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/key_cache_hit_rate/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyCacheHitRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyCacheHitRateOK), nil

}

/*
GetKeyCacheKeysToSave1 gets key cache keys to save1

get key cache keys to save
*/
func (a *Client) GetKeyCacheKeysToSave1(params *GetKeyCacheKeysToSave1Params) (*GetKeyCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_cache_keys_to_save1",
		Method:             "GET",
		PathPattern:        "/cache_service/key_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyCacheKeysToSave1OK), nil

}

/*
GetKeyCacheSavePeriodInSeconds1 gets key cache save period in seconds1

get key cache save period in seconds
*/
func (a *Client) GetKeyCacheSavePeriodInSeconds1(params *GetKeyCacheSavePeriodInSeconds1Params) (*GetKeyCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_cache_save_period_in_seconds1",
		Method:             "GET",
		PathPattern:        "/cache_service/key_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyCacheSavePeriodInSeconds1OK), nil

}

/*
GetKeyCapacity1 gets key capacity1

Get key capacity
*/
func (a *Client) GetKeyCapacity1(params *GetKeyCapacity1Params) (*GetKeyCapacity1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyCapacity1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_capacity1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyCapacity1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyCapacity1OK), nil

}

/*
GetKeyEntries1 gets key entries1

Get key entries
*/
func (a *Client) GetKeyEntries1(params *GetKeyEntries1Params) (*GetKeyEntries1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyEntries1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_entries1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyEntries1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyEntries1OK), nil

}

/*
GetKeyHitRate1 gets key hit rate1

Get key hit rate
*/
func (a *Client) GetKeyHitRate1(params *GetKeyHitRate1Params) (*GetKeyHitRate1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyHitRate1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_hit_rate1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyHitRate1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyHitRate1OK), nil

}

/*
GetKeyHits1 gets key hits1

Get key hits
*/
func (a *Client) GetKeyHits1(params *GetKeyHits1Params) (*GetKeyHits1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyHits1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_hits1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyHits1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyHits1OK), nil

}

/*
GetKeyHitsMovingAvrage1 gets key hits moving avrage1

Get key hits moving avrage
*/
func (a *Client) GetKeyHitsMovingAvrage1(params *GetKeyHitsMovingAvrage1Params) (*GetKeyHitsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyHitsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_hits_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyHitsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyHitsMovingAvrage1OK), nil

}

/*
GetKeyRequests1 gets key requests1

Get key requests
*/
func (a *Client) GetKeyRequests1(params *GetKeyRequests1Params) (*GetKeyRequests1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyRequests1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_requests1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyRequests1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyRequests1OK), nil

}

/*
GetKeyRequestsMovingAvrage1 gets key requests moving avrage1

Get key requests moving avrage
*/
func (a *Client) GetKeyRequestsMovingAvrage1(params *GetKeyRequestsMovingAvrage1Params) (*GetKeyRequestsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyRequestsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_requests_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyRequestsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyRequestsMovingAvrage1OK), nil

}

/*
GetKeySize1 gets key size1

Get key cache waited size
*/
func (a *Client) GetKeySize1(params *GetKeySize1Params) (*GetKeySize1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeySize1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_key_size1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/key/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeySize1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeySize1OK), nil

}

/*
GetKeyspaces gets keyspaces

Get the keyspaces
*/
func (a *Client) GetKeyspaces(params *GetKeyspacesParams) (*GetKeyspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_keyspaces",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyspacesOK), nil

}

/*
GetLeavingNodes gets leaving nodes

Retrieve the list of nodes currently leaving the ring
*/
func (a *Client) GetLeavingNodes(params *GetLeavingNodesParams) (*GetLeavingNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeavingNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_leaving_nodes",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/leaving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeavingNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLeavingNodesOK), nil

}

/*
GetLiveDiskSpaceUsed gets live disk space used

Get live disk space used
*/
func (a *Client) GetLiveDiskSpaceUsed(params *GetLiveDiskSpaceUsedParams) (*GetLiveDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_live_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLiveDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLiveDiskSpaceUsedOK), nil

}

/*
GetLiveEndpoint gets live endpoint

Get the addreses of live endpoints
*/
func (a *Client) GetLiveEndpoint(params *GetLiveEndpointParams) (*GetLiveEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_live_endpoint",
		Method:             "GET",
		PathPattern:        "/gossiper/endpoint/live/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLiveEndpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLiveEndpointOK), nil

}

/*
GetLiveScannedHistogram gets live scanned histogram

Get live scanned histogram
*/
func (a *Client) GetLiveScannedHistogram(params *GetLiveScannedHistogramParams) (*GetLiveScannedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveScannedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_live_scanned_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_scanned_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLiveScannedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLiveScannedHistogramOK), nil

}

/*
GetLiveSsTableCount gets live ss table count

Get live ss table count
*/
func (a *Client) GetLiveSsTableCount(params *GetLiveSsTableCountParams) (*GetLiveSsTableCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveSsTableCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_live_ss_table_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/live_ss_table_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLiveSsTableCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLiveSsTableCountOK), nil

}

/*
GetLoad gets load

get load value
*/
func (a *Client) GetLoad(params *GetLoadParams) (*GetLoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_load",
		Method:             "GET",
		PathPattern:        "/storage_service/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoadOK), nil

}

/*
GetLoadMap gets load map

load value. Keys are IP addresses
*/
func (a *Client) GetLoadMap(params *GetLoadMapParams) (*GetLoadMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoadMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_load_map",
		Method:             "GET",
		PathPattern:        "/storage_service/load_map",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoadMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoadMapOK), nil

}

/*
GetLoggerLevel gets logger level

Get logger level
*/
func (a *Client) GetLoggerLevel(params *GetLoggerLevelParams) (*GetLoggerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoggerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_logger_level",
		Method:             "GET",
		PathPattern:        "/system/logger/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoggerLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoggerLevelOK), nil

}

/*
GetLoggingLevels gets logging levels

get the runtime logging levels
*/
func (a *Client) GetLoggingLevels(params *GetLoggingLevelsParams) (*GetLoggingLevelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoggingLevelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_logging_levels",
		Method:             "GET",
		PathPattern:        "/storage_service/logging_level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoggingLevelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoggingLevelsOK), nil

}

/*
GetMaxHintWindow gets max hint window

Get the max hint window
*/
func (a *Client) GetMaxHintWindow(params *GetMaxHintWindowParams) (*GetMaxHintWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaxHintWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_max_hint_window",
		Method:             "GET",
		PathPattern:        "/storage_proxy/max_hint_window",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaxHintWindowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaxHintWindowOK), nil

}

/*
GetMaxHintsInProgress gets max hints in progress

Get max hints in progress
*/
func (a *Client) GetMaxHintsInProgress(params *GetMaxHintsInProgressParams) (*GetMaxHintsInProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaxHintsInProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_max_hints_in_progress",
		Method:             "GET",
		PathPattern:        "/storage_proxy/max_hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaxHintsInProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaxHintsInProgressOK), nil

}

/*
GetMaxRowSize gets max row size

Get max row size
*/
func (a *Client) GetMaxRowSize(params *GetMaxRowSizeParams) (*GetMaxRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaxRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_max_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/max_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaxRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaxRowSizeOK), nil

}

/*
GetMaximumCompactionThreshold gets maximum compaction threshold

get the maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) GetMaximumCompactionThreshold(params *GetMaximumCompactionThresholdParams) (*GetMaximumCompactionThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaximumCompactionThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_maximum_compaction_threshold",
		Method:             "GET",
		PathPattern:        "/column_family/maximum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaximumCompactionThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaximumCompactionThresholdOK), nil

}

/*
GetMeanRowSize gets mean row size

Get mean row size
*/
func (a *Client) GetMeanRowSize(params *GetMeanRowSizeParams) (*GetMeanRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeanRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_mean_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/mean_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMeanRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeanRowSizeOK), nil

}

/*
GetMemtableColumnsCount gets memtable columns count

get memtable columns count
*/
func (a *Client) GetMemtableColumnsCount(params *GetMemtableColumnsCountParams) (*GetMemtableColumnsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemtableColumnsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_memtable_columns_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_columns_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemtableColumnsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemtableColumnsCountOK), nil

}

/*
GetMemtableLiveDataSize gets memtable live data size

Get the column family active memtable live data size
*/
func (a *Client) GetMemtableLiveDataSize(params *GetMemtableLiveDataSizeParams) (*GetMemtableLiveDataSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemtableLiveDataSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_memtable_live_data_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_live_data_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemtableLiveDataSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemtableLiveDataSizeOK), nil

}

/*
GetMemtableOffHeapSize gets memtable off heap size

Get the column family active memtable off heap size
*/
func (a *Client) GetMemtableOffHeapSize(params *GetMemtableOffHeapSizeParams) (*GetMemtableOffHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemtableOffHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_memtable_off_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_off_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemtableOffHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemtableOffHeapSizeOK), nil

}

/*
GetMemtableOnHeapSize gets memtable on heap size

Get the column family active memtable on heap size
*/
func (a *Client) GetMemtableOnHeapSize(params *GetMemtableOnHeapSizeParams) (*GetMemtableOnHeapSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemtableOnHeapSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_memtable_on_heap_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_on_heap_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemtableOnHeapSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemtableOnHeapSizeOK), nil

}

/*
GetMemtableSwitchCount gets memtable switch count

Get memtable switch count
*/
func (a *Client) GetMemtableSwitchCount(params *GetMemtableSwitchCountParams) (*GetMemtableSwitchCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemtableSwitchCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_memtable_switch_count",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/memtable_switch_count/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemtableSwitchCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMemtableSwitchCountOK), nil

}

/*
GetMetricsLoad gets metrics load

Get load
*/
func (a *Client) GetMetricsLoad(params *GetMetricsLoadParams) (*GetMetricsLoadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsLoadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_metrics_load",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/load",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetricsLoadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetricsLoadOK), nil

}

/*
GetMinRowSize gets min row size

Get min row size
*/
func (a *Client) GetMinRowSize(params *GetMinRowSizeParams) (*GetMinRowSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinRowSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_min_row_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/min_row_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinRowSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMinRowSizeOK), nil

}

/*
GetMinimumCompactionThreshold gets minimum compaction threshold

get the minimum number of sstables in queue before compaction kicks off
*/
func (a *Client) GetMinimumCompactionThreshold(params *GetMinimumCompactionThresholdParams) (*GetMinimumCompactionThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMinimumCompactionThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_minimum_compaction_threshold",
		Method:             "GET",
		PathPattern:        "/column_family/minimum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMinimumCompactionThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMinimumCompactionThresholdOK), nil

}

/*
GetMovingNodes gets moving nodes

Retrieve the list of nodes currently moving in the ring
*/
func (a *Client) GetMovingNodes(params *GetMovingNodesParams) (*GetMovingNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMovingNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_moving_nodes",
		Method:             "GET",
		PathPattern:        "/storage_service/nodes/moving",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMovingNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMovingNodesOK), nil

}

/*
GetNaturalEndpoints gets natural endpoints

This method returns the N endpoints that are responsible for storing the specified key i.e for replication. the endpoint responsible for this key
*/
func (a *Client) GetNaturalEndpoints(params *GetNaturalEndpointsParams) (*GetNaturalEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNaturalEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_natural_endpoints",
		Method:             "GET",
		PathPattern:        "/storage_service/natural_endpoints/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNaturalEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNaturalEndpointsOK), nil

}

/*
GetNodeTokens gets node tokens

Returns a list of the tokens for or a specified node
*/
func (a *Client) GetNodeTokens(params *GetNodeTokensParams) (*GetNodeTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_node_tokens",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens/{endpoint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeTokensOK), nil

}

/*
GetNotStoredHintsCount gets not stored hints count

Get not stored hints count
*/
func (a *Client) GetNotStoredHintsCount(params *GetNotStoredHintsCountParams) (*GetNotStoredHintsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotStoredHintsCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_not_stored_hints_count",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/metrics/not_stored_hints/{addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotStoredHintsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNotStoredHintsCountOK), nil

}

/*
GetOperationMode gets operation mode

Get the operational mode (leaving, joining, normal, decommissioned, client)
*/
func (a *Client) GetOperationMode(params *GetOperationModeParams) (*GetOperationModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperationModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_operation_mode",
		Method:             "GET",
		PathPattern:        "/storage_service/operation_mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperationModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOperationModeOK), nil

}

/*
GetOwnership gets ownership

The mapping from token -> % of cluster owned by that token
*/
func (a *Client) GetOwnership(params *GetOwnershipParams) (*GetOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_ownership",
		Method:             "GET",
		PathPattern:        "/storage_service/ownership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOwnershipReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOwnershipOK), nil

}

/*
GetPartitionerName gets partitioner name

Returns the cluster partitioner
*/
func (a *Client) GetPartitionerName(params *GetPartitionerNameParams) (*GetPartitionerNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPartitionerNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_partitioner_name",
		Method:             "GET",
		PathPattern:        "/storage_service/partitioner_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPartitionerNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPartitionerNameOK), nil

}

/*
GetPendingCompactions gets pending compactions

Get pending compactions
*/
func (a *Client) GetPendingCompactions(params *GetPendingCompactionsParams) (*GetPendingCompactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingCompactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_compactions",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_compactions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingCompactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingCompactionsOK), nil

}

/*
GetPendingFlushes gets pending flushes

Get pending flushes
*/
func (a *Client) GetPendingFlushes(params *GetPendingFlushesParams) (*GetPendingFlushesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingFlushesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_flushes",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/pending_flushes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingFlushesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingFlushesOK), nil

}

/*
GetPendingMessages gets pending messages

Get the number of pending messages
*/
func (a *Client) GetPendingMessages(params *GetPendingMessagesParams) (*GetPendingMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingMessagesOK), nil

}

/*
GetPendingRangeToEndpointMap gets pending range to endpoint map

Retrieve a map of pending ranges to endpoints that describe the ring topology
*/
func (a *Client) GetPendingRangeToEndpointMap(params *GetPendingRangeToEndpointMapParams) (*GetPendingRangeToEndpointMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingRangeToEndpointMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_range_to_endpoint_map",
		Method:             "GET",
		PathPattern:        "/storage_service/pending_range/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingRangeToEndpointMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingRangeToEndpointMapOK), nil

}

/*
GetPendingTasks gets pending tasks

Get pending tasks
*/
func (a *Client) GetPendingTasks(params *GetPendingTasksParams) (*GetPendingTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_tasks",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/pending_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingTasksOK), nil

}

/*
GetPendingTasks1 gets pending tasks1

Get pending tasks
*/
func (a *Client) GetPendingTasks1(params *GetPendingTasks1Params) (*GetPendingTasks1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingTasks1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_pending_tasks1",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/pending_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingTasks1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingTasks1OK), nil

}

/*
GetPhiConvictThreshold gets phi convict threshold

Get the phi convict threshold
*/
func (a *Client) GetPhiConvictThreshold(params *GetPhiConvictThresholdParams) (*GetPhiConvictThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhiConvictThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_phi_convict_threshold",
		Method:             "GET",
		PathPattern:        "/failure_detector/phi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPhiConvictThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPhiConvictThresholdOK), nil

}

/*
GetRack gets rack

Provides the Rack name depending on the respective snitch used, given the host name/ip
*/
func (a *Client) GetRack(params *GetRackParams) (*GetRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_rack",
		Method:             "GET",
		PathPattern:        "/snitch/rack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRackOK), nil

}

/*
GetRangeEstimatedHistogram gets range estimated histogram

Get range estimated latency
*/
func (a *Client) GetRangeEstimatedHistogram(params *GetRangeEstimatedHistogramParams) (*GetRangeEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeEstimatedHistogramOK), nil

}

/*
GetRangeLatency gets range latency

Get range latency
*/
func (a *Client) GetRangeLatency(params *GetRangeLatencyParams) (*GetRangeLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeLatencyOK), nil

}

/*
GetRangeLatency1 gets range latency

Get range latency
*/
func (a *Client) GetRangeLatency1(params *GetRangeLatency1Params) (*GetRangeLatency1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeLatency1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_latency1",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeLatency1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeLatency1OK), nil

}

/*
GetRangeLatencyEstimatedHistogram gets range latency estimated histogram

Get range latency
*/
func (a *Client) GetRangeLatencyEstimatedHistogram(params *GetRangeLatencyEstimatedHistogramParams) (*GetRangeLatencyEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeLatencyEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_latency_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeLatencyEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeLatencyEstimatedHistogramOK), nil

}

/*
GetRangeLatencyEstimatedRecentHistogram gets range latency estimated recent histogram

Get range latency
*/
func (a *Client) GetRangeLatencyEstimatedRecentHistogram(params *GetRangeLatencyEstimatedRecentHistogramParams) (*GetRangeLatencyEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeLatencyEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_latency_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/range_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeLatencyEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeLatencyEstimatedRecentHistogramOK), nil

}

/*
GetRangeMetricsLatencyHistogram gets range metrics latency histogram

Get range metrics rate and histogram
*/
func (a *Client) GetRangeMetricsLatencyHistogram(params *GetRangeMetricsLatencyHistogramParams) (*GetRangeMetricsLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_latency_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsLatencyHistogramOK), nil

}

/*
GetRangeMetricsLatencyHistogramDepricated gets range metrics latency histogram depricated

Get range metrics
*/
func (a *Client) GetRangeMetricsLatencyHistogramDepricated(params *GetRangeMetricsLatencyHistogramDepricatedParams) (*GetRangeMetricsLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsLatencyHistogramDepricatedOK), nil

}

/*
GetRangeMetricsTimeouts gets range metrics timeouts

Get range metrics
*/
func (a *Client) GetRangeMetricsTimeouts(params *GetRangeMetricsTimeoutsParams) (*GetRangeMetricsTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_timeouts",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsTimeoutsOK), nil

}

/*
GetRangeMetricsTimeoutsRates gets range metrics timeouts rates

Get range metrics rates
*/
func (a *Client) GetRangeMetricsTimeoutsRates(params *GetRangeMetricsTimeoutsRatesParams) (*GetRangeMetricsTimeoutsRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsTimeoutsRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_timeouts_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsTimeoutsRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsTimeoutsRatesOK), nil

}

/*
GetRangeMetricsUnavailables gets range metrics unavailables

Get range metrics
*/
func (a *Client) GetRangeMetricsUnavailables(params *GetRangeMetricsUnavailablesParams) (*GetRangeMetricsUnavailablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsUnavailablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_unavailables",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsUnavailablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsUnavailablesOK), nil

}

/*
GetRangeMetricsUnavailablesRates gets range metrics unavailables rates

Get range metrics rates
*/
func (a *Client) GetRangeMetricsUnavailablesRates(params *GetRangeMetricsUnavailablesRatesParams) (*GetRangeMetricsUnavailablesRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeMetricsUnavailablesRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_metrics_unavailables_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/range/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeMetricsUnavailablesRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeMetricsUnavailablesRatesOK), nil

}

/*
GetRangeRPCTimeout gets range rpc timeout

Get range rpc timeout in seconds
*/
func (a *Client) GetRangeRPCTimeout(params *GetRangeRPCTimeoutParams) (*GetRangeRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/range_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeRPCTimeoutOK), nil

}

/*
GetRangeToEndpointMap gets range to endpoint map

Retrieve a map of range to end points that describe the ring topology of a Cassandra cluster.
*/
func (a *Client) GetRangeToEndpointMap(params *GetRangeToEndpointMapParams) (*GetRangeToEndpointMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeToEndpointMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_range_to_endpoint_map",
		Method:             "GET",
		PathPattern:        "/storage_service/range_to_endpoint_map/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeToEndpointMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRangeToEndpointMapOK), nil

}

/*
GetRead gets read

Get number of reads
*/
func (a *Client) GetRead(params *GetReadParams) (*GetReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadOK), nil

}

/*
GetReadEstimatedHistogram gets read estimated histogram

Get read estimated latency
*/
func (a *Client) GetReadEstimatedHistogram(params *GetReadEstimatedHistogramParams) (*GetReadEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadEstimatedHistogramOK), nil

}

/*
GetReadLatency gets read latency

Get read latency
*/
func (a *Client) GetReadLatency(params *GetReadLatencyParams) (*GetReadLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatencyOK), nil

}

/*
GetReadLatency1 gets read latency

Get read latency
*/
func (a *Client) GetReadLatency1(params *GetReadLatency1Params) (*GetReadLatency1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatency1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency1",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatency1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatency1OK), nil

}

/*
GetReadLatencyEstimatedHistogram gets read latency estimated histogram

Get read latency
*/
func (a *Client) GetReadLatencyEstimatedHistogram(params *GetReadLatencyEstimatedHistogramParams) (*GetReadLatencyEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatencyEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatencyEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatencyEstimatedHistogramOK), nil

}

/*
GetReadLatencyEstimatedRecentHistogram gets read latency estimated recent histogram

Get read latency
*/
func (a *Client) GetReadLatencyEstimatedRecentHistogram(params *GetReadLatencyEstimatedRecentHistogramParams) (*GetReadLatencyEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatencyEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatencyEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatencyEstimatedRecentHistogramOK), nil

}

/*
GetReadLatencyHistogram gets read latency histogram

Get read latency moving avrage histogram
*/
func (a *Client) GetReadLatencyHistogram(params *GetReadLatencyHistogramParams) (*GetReadLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/moving_average_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatencyHistogramOK), nil

}

/*
GetReadLatencyHistogramDepricated gets read latency histogram depricated

Get read latency histogram
*/
func (a *Client) GetReadLatencyHistogramDepricated(params *GetReadLatencyHistogramDepricatedParams) (*GetReadLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/read_latency/histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadLatencyHistogramDepricatedOK), nil

}

/*
GetReadMetricsLatencyHistogram gets read metrics latency histogram

Get read metrics
*/
func (a *Client) GetReadMetricsLatencyHistogram(params *GetReadMetricsLatencyHistogramParams) (*GetReadMetricsLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_latency_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsLatencyHistogramOK), nil

}

/*
GetReadMetricsLatencyHistogramDepricated gets read metrics latency histogram depricated

Get read metrics
*/
func (a *Client) GetReadMetricsLatencyHistogramDepricated(params *GetReadMetricsLatencyHistogramDepricatedParams) (*GetReadMetricsLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsLatencyHistogramDepricatedOK), nil

}

/*
GetReadMetricsTimeouts gets read metrics timeouts

Get read metrics
*/
func (a *Client) GetReadMetricsTimeouts(params *GetReadMetricsTimeoutsParams) (*GetReadMetricsTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_timeouts",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsTimeoutsOK), nil

}

/*
GetReadMetricsTimeoutsRates gets read metrics timeouts rates

Get read metrics rates
*/
func (a *Client) GetReadMetricsTimeoutsRates(params *GetReadMetricsTimeoutsRatesParams) (*GetReadMetricsTimeoutsRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsTimeoutsRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_timeouts_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsTimeoutsRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsTimeoutsRatesOK), nil

}

/*
GetReadMetricsUnavailables gets read metrics unavailables

Get read metrics
*/
func (a *Client) GetReadMetricsUnavailables(params *GetReadMetricsUnavailablesParams) (*GetReadMetricsUnavailablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsUnavailablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_unavailables",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsUnavailablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsUnavailablesOK), nil

}

/*
GetReadMetricsUnavailablesRates gets read metrics unavailables rates

Get read metrics rates
*/
func (a *Client) GetReadMetricsUnavailablesRates(params *GetReadMetricsUnavailablesRatesParams) (*GetReadMetricsUnavailablesRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadMetricsUnavailablesRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_metrics_unavailables_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/read/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadMetricsUnavailablesRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadMetricsUnavailablesRatesOK), nil

}

/*
GetReadRepairAttempted gets read repair attempted

Get read repair attempted
*/
func (a *Client) GetReadRepairAttempted(params *GetReadRepairAttemptedParams) (*GetReadRepairAttemptedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadRepairAttemptedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_repair_attempted",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_attempted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadRepairAttemptedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadRepairAttemptedOK), nil

}

/*
GetReadRepairRepairedBackground gets read repair repaired background

Get read repair repaired background
*/
func (a *Client) GetReadRepairRepairedBackground(params *GetReadRepairRepairedBackgroundParams) (*GetReadRepairRepairedBackgroundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadRepairRepairedBackgroundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_repair_repaired_background",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_repaired_background",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadRepairRepairedBackgroundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadRepairRepairedBackgroundOK), nil

}

/*
GetReadRepairRepairedBlocking gets read repair repaired blocking

Get read repair repaired blocking
*/
func (a *Client) GetReadRepairRepairedBlocking(params *GetReadRepairRepairedBlockingParams) (*GetReadRepairRepairedBlockingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadRepairRepairedBlockingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_repair_repaired_blocking",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_repair_repaired_blocking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadRepairRepairedBlockingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadRepairRepairedBlockingOK), nil

}

/*
GetReadRPCTimeout gets read rpc timeout

Get the read RPC timeout in seconds
*/
func (a *Client) GetReadRPCTimeout(params *GetReadRPCTimeoutParams) (*GetReadRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReadRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_read_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/read_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReadRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReadRPCTimeoutOK), nil

}

/*
GetRecentBloomFilterFalsePositives gets recent bloom filter false positives

Get recent bloom filter false positives
*/
func (a *Client) GetRecentBloomFilterFalsePositives(params *GetRecentBloomFilterFalsePositivesParams) (*GetRecentBloomFilterFalsePositivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecentBloomFilterFalsePositivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_recent_bloom_filter_false_positives",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_positives/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecentBloomFilterFalsePositivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecentBloomFilterFalsePositivesOK), nil

}

/*
GetRecentBloomFilterFalseRatio gets recent bloom filter false ratio

Get recent bloom filter false ratio
*/
func (a *Client) GetRecentBloomFilterFalseRatio(params *GetRecentBloomFilterFalseRatioParams) (*GetRecentBloomFilterFalseRatioOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecentBloomFilterFalseRatioParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_recent_bloom_filter_false_ratio",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/recent_bloom_filter_false_ratio/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecentBloomFilterFalseRatioReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecentBloomFilterFalseRatioOK), nil

}

/*
GetReleaseVersion gets release version

Fetch a string representation of the Cassandra version.
*/
func (a *Client) GetReleaseVersion(params *GetReleaseVersionParams) (*GetReleaseVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_release_version",
		Method:             "GET",
		PathPattern:        "/storage_service/release_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReleaseVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReleaseVersionOK), nil

}

/*
GetRemovalStatus gets removal status

Get the status of a token removal.
*/
func (a *Client) GetRemovalStatus(params *GetRemovalStatusParams) (*GetRemovalStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemovalStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_removal_status",
		Method:             "GET",
		PathPattern:        "/storage_service/removal_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRemovalStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRemovalStatusOK), nil

}

/*
GetRespondCompletedMessages gets respond completed messages

Get the number of completed respond messages
*/
func (a *Client) GetRespondCompletedMessages(params *GetRespondCompletedMessagesParams) (*GetRespondCompletedMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRespondCompletedMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_respond_completed_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/respond_completed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRespondCompletedMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRespondCompletedMessagesOK), nil

}

/*
GetRespondPendingMessages gets respond pending messages

Get the number of messages waiting for respond
*/
func (a *Client) GetRespondPendingMessages(params *GetRespondPendingMessagesParams) (*GetRespondPendingMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRespondPendingMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_respond_pending_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/respond_pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRespondPendingMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRespondPendingMessagesOK), nil

}

/*
GetRowCacheHit gets row cache hit

Get row cache hit
*/
func (a *Client) GetRowCacheHit(params *GetRowCacheHitParams) (*GetRowCacheHitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCacheHitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_cache_hit",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCacheHitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCacheHitOK), nil

}

/*
GetRowCacheHitOutOfRange gets row cache hit out of range

Get row cache hit out of range
*/
func (a *Client) GetRowCacheHitOutOfRange(params *GetRowCacheHitOutOfRangeParams) (*GetRowCacheHitOutOfRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCacheHitOutOfRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_cache_hit_out_of_range",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_hit_out_of_range/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCacheHitOutOfRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCacheHitOutOfRangeOK), nil

}

/*
GetRowCacheKeysToSave1 gets row cache keys to save1

get row cache keys to save
*/
func (a *Client) GetRowCacheKeysToSave1(params *GetRowCacheKeysToSave1Params) (*GetRowCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_cache_keys_to_save1",
		Method:             "GET",
		PathPattern:        "/cache_service/row_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCacheKeysToSave1OK), nil

}

/*
GetRowCacheMiss gets row cache miss

Get row cache miss
*/
func (a *Client) GetRowCacheMiss(params *GetRowCacheMissParams) (*GetRowCacheMissOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCacheMissParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_cache_miss",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/row_cache_miss/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCacheMissReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCacheMissOK), nil

}

/*
GetRowCacheSavePeriodInSeconds1 gets row cache save period in seconds1

get row cache save period in seconds
*/
func (a *Client) GetRowCacheSavePeriodInSeconds1(params *GetRowCacheSavePeriodInSeconds1Params) (*GetRowCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_cache_save_period_in_seconds1",
		Method:             "GET",
		PathPattern:        "/cache_service/row_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCacheSavePeriodInSeconds1OK), nil

}

/*
GetRowCapacity1 gets row capacity1

Get row capacity
*/
func (a *Client) GetRowCapacity1(params *GetRowCapacity1Params) (*GetRowCapacity1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowCapacity1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_capacity1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowCapacity1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowCapacity1OK), nil

}

/*
GetRowEntries1 gets row entries1

Get row entries
*/
func (a *Client) GetRowEntries1(params *GetRowEntries1Params) (*GetRowEntries1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowEntries1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_entries1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowEntries1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowEntries1OK), nil

}

/*
GetRowHitRate1 gets row hit rate1

Get row hit rate
*/
func (a *Client) GetRowHitRate1(params *GetRowHitRate1Params) (*GetRowHitRate1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowHitRate1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_hit_rate1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hit_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowHitRate1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowHitRate1OK), nil

}

/*
GetRowHits1 gets row hits1

Get row hits
*/
func (a *Client) GetRowHits1(params *GetRowHits1Params) (*GetRowHits1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowHits1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_hits1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowHits1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowHits1OK), nil

}

/*
GetRowHitsMovingAvrage1 gets row hits moving avrage1

Get row hits moving avrage
*/
func (a *Client) GetRowHitsMovingAvrage1(params *GetRowHitsMovingAvrage1Params) (*GetRowHitsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowHitsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_hits_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/hits_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowHitsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowHitsMovingAvrage1OK), nil

}

/*
GetRowRequests1 gets row requests1

Get row requests
*/
func (a *Client) GetRowRequests1(params *GetRowRequests1Params) (*GetRowRequests1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowRequests1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_requests1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowRequests1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowRequests1OK), nil

}

/*
GetRowRequestsMovingAvrage1 gets row requests moving avrage1

Get row requests moving avrage
*/
func (a *Client) GetRowRequestsMovingAvrage1(params *GetRowRequestsMovingAvrage1Params) (*GetRowRequestsMovingAvrage1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowRequestsMovingAvrage1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_requests_moving_avrage1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/requests_moving_avrage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowRequestsMovingAvrage1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowRequestsMovingAvrage1OK), nil

}

/*
GetRowSize1 gets row size1

Get row cache waited size
*/
func (a *Client) GetRowSize1(params *GetRowSize1Params) (*GetRowSize1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRowSize1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_row_size1",
		Method:             "GET",
		PathPattern:        "/cache_service/metrics/row/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRowSize1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRowSize1OK), nil

}

/*
GetRPCTimeout gets rpc timeout

Get the RPC timeout in seconds
*/
func (a *Client) GetRPCTimeout(params *GetRPCTimeoutParams) (*GetRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRPCTimeoutOK), nil

}

/*
GetSavedCachesLocation gets saved caches location

Get location of the saved caches dir
*/
func (a *Client) GetSavedCachesLocation(params *GetSavedCachesLocationParams) (*GetSavedCachesLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedCachesLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_saved_caches_location",
		Method:             "GET",
		PathPattern:        "/storage_service/saved_caches/location",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedCachesLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSavedCachesLocationOK), nil

}

/*
GetSchemaVersion gets schema version

Fetch a string representation of the current Schema version.
*/
func (a *Client) GetSchemaVersion(params *GetSchemaVersionParams) (*GetSchemaVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_schema_version",
		Method:             "GET",
		PathPattern:        "/storage_service/schema_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemaVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchemaVersionOK), nil

}

/*
GetSchemaVersions gets schema versions

Get a map of the schema versions
*/
func (a *Client) GetSchemaVersions(params *GetSchemaVersionsParams) (*GetSchemaVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_schema_versions",
		Method:             "GET",
		PathPattern:        "/storage_proxy/schema_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchemaVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchemaVersionsOK), nil

}

/*
GetScyllaReleaseVersion gets scylla release version

Fetch a string representation of the Scylla version.
*/
func (a *Client) GetScyllaReleaseVersion(params *GetScyllaReleaseVersionParams) (*GetScyllaReleaseVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScyllaReleaseVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_scylla_release_version",
		Method:             "GET",
		PathPattern:        "/storage_service/scylla_release_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScyllaReleaseVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScyllaReleaseVersionOK), nil

}

/*
GetSentMessages gets sent messages

Get the number of sent messages
*/
func (a *Client) GetSentMessages(params *GetSentMessagesParams) (*GetSentMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSentMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sent_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/sent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSentMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSentMessagesOK), nil

}

/*
GetSimpleStates gets simple states

Get simple_states
*/
func (a *Client) GetSimpleStates(params *GetSimpleStatesParams) (*GetSimpleStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimpleStatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_simple_states",
		Method:             "GET",
		PathPattern:        "/failure_detector/simple_states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSimpleStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimpleStatesOK), nil

}

/*
GetSlowQueryInfo gets slow query info

Returns the slow query record configuration.
*/
func (a *Client) GetSlowQueryInfo(params *GetSlowQueryInfoParams) (*GetSlowQueryInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlowQueryInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_slow_query_info",
		Method:             "GET",
		PathPattern:        "/storage_service/slow_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSlowQueryInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSlowQueryInfoOK), nil

}

/*
GetSnapshotDetails gets snapshot details

Get the details of all the snapshot
*/
func (a *Client) GetSnapshotDetails(params *GetSnapshotDetailsParams) (*GetSnapshotDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_snapshot_details",
		Method:             "GET",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotDetailsOK), nil

}

/*
GetSnitchName gets snitch name

Provides the snitch name of the cluster
*/
func (a *Client) GetSnitchName(params *GetSnitchNameParams) (*GetSnitchNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnitchNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_snitch_name",
		Method:             "GET",
		PathPattern:        "/snitch/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnitchNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnitchNameOK), nil

}

/*
GetSpeculativeRetries gets speculative retries

Get speculative retries
*/
func (a *Client) GetSpeculativeRetries(params *GetSpeculativeRetriesParams) (*GetSpeculativeRetriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpeculativeRetriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_speculative_retries",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/speculative_retries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpeculativeRetriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpeculativeRetriesOK), nil

}

/*
GetSstableCountPerLevel gets sstable count per level

sstable count for each level. empty unless leveled compaction is used
*/
func (a *Client) GetSstableCountPerLevel(params *GetSstableCountPerLevelParams) (*GetSstableCountPerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSstableCountPerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sstable_count_per_level",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/per_level/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSstableCountPerLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSstableCountPerLevelOK), nil

}

/*
GetSstablesForKey gets sstables for key

Returns a list of filenames that contain the given key on this node
*/
func (a *Client) GetSstablesForKey(params *GetSstablesForKeyParams) (*GetSstablesForKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSstablesForKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sstables_for_key",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/by_key/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSstablesForKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSstablesForKeyOK), nil

}

/*
GetSstablesPerReadHistogram gets sstables per read histogram

Get sstables per read histogram
*/
func (a *Client) GetSstablesPerReadHistogram(params *GetSstablesPerReadHistogramParams) (*GetSstablesPerReadHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSstablesPerReadHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sstables_per_read_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/sstables_per_read_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSstablesPerReadHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSstablesPerReadHistogramOK), nil

}

/*
GetStreamThroughputMbPerSec gets stream throughput mb per sec

Get stream throughput mb per sec
*/
func (a *Client) GetStreamThroughputMbPerSec(params *GetStreamThroughputMbPerSecParams) (*GetStreamThroughputMbPerSecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamThroughputMbPerSecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_stream_throughput_mb_per_sec",
		Method:             "GET",
		PathPattern:        "/storage_service/stream_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStreamThroughputMbPerSecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStreamThroughputMbPerSecOK), nil

}

/*
GetTimeoutMessages gets timeout messages

Get the number of timeout messages
*/
func (a *Client) GetTimeoutMessages(params *GetTimeoutMessagesParams) (*GetTimeoutMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeoutMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_timeout_messages",
		Method:             "GET",
		PathPattern:        "/messaging_service/messages/timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimeoutMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimeoutMessagesOK), nil

}

/*
GetTokenEndpoint gets token endpoint

Returns a list of the tokens endpoint mapping
*/
func (a *Client) GetTokenEndpoint(params *GetTokenEndpointParams) (*GetTokenEndpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenEndpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_token_endpoint",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens_endpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenEndpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTokenEndpointOK), nil

}

/*
GetTokens gets tokens

Returns a list of the tokens for this node
*/
func (a *Client) GetTokens(params *GetTokensParams) (*GetTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_tokens",
		Method:             "GET",
		PathPattern:        "/storage_service/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTokensOK), nil

}

/*
GetTombstoneFailureThreshold gets tombstone failure threshold
*/
func (a *Client) GetTombstoneFailureThreshold(params *GetTombstoneFailureThresholdParams) (*GetTombstoneFailureThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTombstoneFailureThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_tombstone_failure_threshold",
		Method:             "GET",
		PathPattern:        "/storage_service/tombstone_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTombstoneFailureThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTombstoneFailureThresholdOK), nil

}

/*
GetTombstoneScannedHistogram gets tombstone scanned histogram

Get tombstone scanned histogram
*/
func (a *Client) GetTombstoneScannedHistogram(params *GetTombstoneScannedHistogramParams) (*GetTombstoneScannedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTombstoneScannedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_tombstone_scanned_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/tombstone_scanned_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTombstoneScannedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTombstoneScannedHistogramOK), nil

}

/*
GetTombstoneWarnThreshold gets tombstone warn threshold

Returns the threshold for warning of queries with many tombstones
*/
func (a *Client) GetTombstoneWarnThreshold(params *GetTombstoneWarnThresholdParams) (*GetTombstoneWarnThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTombstoneWarnThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_tombstone_warn_threshold",
		Method:             "GET",
		PathPattern:        "/storage_service/tombstone_warn_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTombstoneWarnThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTombstoneWarnThresholdOK), nil

}

/*
GetTotalCommitLogSize gets total commit log size

Get total commit log size
*/
func (a *Client) GetTotalCommitLogSize(params *GetTotalCommitLogSizeParams) (*GetTotalCommitLogSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalCommitLogSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_commit_log_size",
		Method:             "GET",
		PathPattern:        "/commitlog/metrics/total_commit_log_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalCommitLogSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalCommitLogSizeOK), nil

}

/*
GetTotalCompactionsCompleted gets total compactions completed

Get total compactions completed
*/
func (a *Client) GetTotalCompactionsCompleted(params *GetTotalCompactionsCompletedParams) (*GetTotalCompactionsCompletedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalCompactionsCompletedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_compactions_completed",
		Method:             "GET",
		PathPattern:        "/compaction_manager/metrics/total_compactions_completed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalCompactionsCompletedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalCompactionsCompletedOK), nil

}

/*
GetTotalDiskSpaceUsed gets total disk space used

Get total disk space used
*/
func (a *Client) GetTotalDiskSpaceUsed(params *GetTotalDiskSpaceUsedParams) (*GetTotalDiskSpaceUsedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalDiskSpaceUsedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_disk_space_used",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/total_disk_space_used/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalDiskSpaceUsedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalDiskSpaceUsedOK), nil

}

/*
GetTotalHints gets total hints

Get total hints
*/
func (a *Client) GetTotalHints(params *GetTotalHintsParams) (*GetTotalHintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalHintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_hints",
		Method:             "GET",
		PathPattern:        "/storage_proxy/total_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalHintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalHintsOK), nil

}

/*
GetTotalHints1 gets total hints1

Get total hints
*/
func (a *Client) GetTotalHints1(params *GetTotalHints1Params) (*GetTotalHints1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalHints1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_hints1",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/total_hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalHints1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalHints1OK), nil

}

/*
GetTotalHintsInProgress gets total hints in progress

Get total hints in progress
*/
func (a *Client) GetTotalHintsInProgress(params *GetTotalHintsInProgressParams) (*GetTotalHintsInProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalHintsInProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_hints_in_progress",
		Method:             "GET",
		PathPattern:        "/storage_service/metrics/hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalHintsInProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalHintsInProgressOK), nil

}

/*
GetTotalIncomingBytes gets total incoming bytes

Get total incoming bytes
*/
func (a *Client) GetTotalIncomingBytes(params *GetTotalIncomingBytesParams) (*GetTotalIncomingBytesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalIncomingBytesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_incoming_bytes",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/incoming/{peer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalIncomingBytesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalIncomingBytesOK), nil

}

/*
GetTotalOutgoingBytes gets total outgoing bytes

Get total outgoing bytes
*/
func (a *Client) GetTotalOutgoingBytes(params *GetTotalOutgoingBytesParams) (*GetTotalOutgoingBytesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTotalOutgoingBytesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_total_outgoing_bytes",
		Method:             "GET",
		PathPattern:        "/stream_manager/metrics/outgoing/{peer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTotalOutgoingBytesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTotalOutgoingBytesOK), nil

}

/*
GetTraceProbability gets trace probability

Returns the configured tracing probability.
*/
func (a *Client) GetTraceProbability(params *GetTraceProbabilityParams) (*GetTraceProbabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTraceProbabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_trace_probability",
		Method:             "GET",
		PathPattern:        "/storage_service/trace_probability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTraceProbabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTraceProbabilityOK), nil

}

/*
GetTrueSnapshotsSize gets true snapshots size

Get true snapshots size
*/
func (a *Client) GetTrueSnapshotsSize(params *GetTrueSnapshotsSizeParams) (*GetTrueSnapshotsSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTrueSnapshotsSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_true_snapshots_size",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/snapshots_size/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTrueSnapshotsSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTrueSnapshotsSizeOK), nil

}

/*
GetTruncateRPCTimeout gets truncate rpc timeout

Get truncate rpc timeout in seconds
*/
func (a *Client) GetTruncateRPCTimeout(params *GetTruncateRPCTimeoutParams) (*GetTruncateRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTruncateRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_truncate_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/truncate_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTruncateRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTruncateRPCTimeoutOK), nil

}

/*
GetUnleveledSstables gets unleveled sstables

the number of SSTables in L0.  Always return 0 if Leveled compaction is not enabled.
*/
func (a *Client) GetUnleveledSstables(params *GetUnleveledSstablesParams) (*GetUnleveledSstablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnleveledSstablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_unleveled_sstables",
		Method:             "GET",
		PathPattern:        "/column_family/sstables/unleveled/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUnleveledSstablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUnleveledSstablesOK), nil

}

/*
GetUpEndpointCount gets up endpoint count

Get count up endpoint
*/
func (a *Client) GetUpEndpointCount(params *GetUpEndpointCountParams) (*GetUpEndpointCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpEndpointCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_up_endpoint_count",
		Method:             "GET",
		PathPattern:        "/failure_detector/count/endpoint/up",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUpEndpointCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpEndpointCountOK), nil

}

/*
GetVersion gets version

Get the version number
*/
func (a *Client) GetVersion(params *GetVersionParams) (*GetVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_version",
		Method:             "GET",
		PathPattern:        "/messaging_service/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionOK), nil

}

/*
GetWaitingOnCommit gets waiting on commit

Get waiting on commit
*/
func (a *Client) GetWaitingOnCommit(params *GetWaitingOnCommitParams) (*GetWaitingOnCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWaitingOnCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_waiting_on_commit",
		Method:             "GET",
		PathPattern:        "/commit_log/metrics/waiting_on_commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWaitingOnCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWaitingOnCommitOK), nil

}

/*
GetWaitingOnFreeMemtableSpace gets waiting on free memtable space

Get waiting on free memtable space
*/
func (a *Client) GetWaitingOnFreeMemtableSpace(params *GetWaitingOnFreeMemtableSpaceParams) (*GetWaitingOnFreeMemtableSpaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWaitingOnFreeMemtableSpaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_waiting_on_free_memtable_space",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/waiting_on_free_memtable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWaitingOnFreeMemtableSpaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWaitingOnFreeMemtableSpaceOK), nil

}

/*
GetWaitingOnSegmentAllocation gets waiting on segment allocation

Get waiting on segment allocation
*/
func (a *Client) GetWaitingOnSegmentAllocation(params *GetWaitingOnSegmentAllocationParams) (*GetWaitingOnSegmentAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWaitingOnSegmentAllocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_waiting_on_segment_allocation",
		Method:             "GET",
		PathPattern:        "/commit_log/metrics/waiting_on_segment_allocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWaitingOnSegmentAllocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWaitingOnSegmentAllocationOK), nil

}

/*
GetWrite gets write

Get number of writes
*/
func (a *Client) GetWrite(params *GetWriteParams) (*GetWriteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteOK), nil

}

/*
GetWriteEstimatedHistogram gets write estimated histogram

Get write estimated latency
*/
func (a *Client) GetWriteEstimatedHistogram(params *GetWriteEstimatedHistogramParams) (*GetWriteEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/estimated_histogram/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteEstimatedHistogramOK), nil

}

/*
GetWriteLatency gets write latency

Get write latency
*/
func (a *Client) GetWriteLatency(params *GetWriteLatencyParams) (*GetWriteLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatencyOK), nil

}

/*
GetWriteLatency1 gets write latency

Get write latency
*/
func (a *Client) GetWriteLatency1(params *GetWriteLatency1Params) (*GetWriteLatency1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatency1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency1",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatency1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatency1OK), nil

}

/*
GetWriteLatencyEstimatedHistogram gets write latency estimated histogram

Get write latency
*/
func (a *Client) GetWriteLatencyEstimatedHistogram(params *GetWriteLatencyEstimatedHistogramParams) (*GetWriteLatencyEstimatedHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatencyEstimatedHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency_estimated_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/estimated_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatencyEstimatedHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatencyEstimatedHistogramOK), nil

}

/*
GetWriteLatencyEstimatedRecentHistogram gets write latency estimated recent histogram

Get write latency
*/
func (a *Client) GetWriteLatencyEstimatedRecentHistogram(params *GetWriteLatencyEstimatedRecentHistogramParams) (*GetWriteLatencyEstimatedRecentHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatencyEstimatedRecentHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency_estimated_recent_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/estimated_recent_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatencyEstimatedRecentHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatencyEstimatedRecentHistogramOK), nil

}

/*
GetWriteLatencyHistogram gets write latency histogram

Get write latency moving average histogram
*/
func (a *Client) GetWriteLatencyHistogram(params *GetWriteLatencyHistogramParams) (*GetWriteLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency_histogram",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/moving_average_histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatencyHistogramOK), nil

}

/*
GetWriteLatencyHistogramDepricated gets write latency histogram depricated

Get write latency histogram
*/
func (a *Client) GetWriteLatencyHistogramDepricated(params *GetWriteLatencyHistogramDepricatedParams) (*GetWriteLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/column_family/metrics/write_latency/histogram/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteLatencyHistogramDepricatedOK), nil

}

/*
GetWriteMetricsLatencyHistogram gets write metrics latency histogram

Get write metrics
*/
func (a *Client) GetWriteMetricsLatencyHistogram(params *GetWriteMetricsLatencyHistogramParams) (*GetWriteMetricsLatencyHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsLatencyHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_latency_histogram",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/moving_average_histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsLatencyHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsLatencyHistogramOK), nil

}

/*
GetWriteMetricsLatencyHistogramDepricated gets write metrics latency histogram depricated

Get write metrics
*/
func (a *Client) GetWriteMetricsLatencyHistogramDepricated(params *GetWriteMetricsLatencyHistogramDepricatedParams) (*GetWriteMetricsLatencyHistogramDepricatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsLatencyHistogramDepricatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_latency_histogram_depricated",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsLatencyHistogramDepricatedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsLatencyHistogramDepricatedOK), nil

}

/*
GetWriteMetricsTimeouts gets write metrics timeouts

Get write metrics
*/
func (a *Client) GetWriteMetricsTimeouts(params *GetWriteMetricsTimeoutsParams) (*GetWriteMetricsTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_timeouts",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsTimeoutsOK), nil

}

/*
GetWriteMetricsTimeoutsRates gets write metrics timeouts rates

Get write metrics rates
*/
func (a *Client) GetWriteMetricsTimeoutsRates(params *GetWriteMetricsTimeoutsRatesParams) (*GetWriteMetricsTimeoutsRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsTimeoutsRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_timeouts_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/timeouts_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsTimeoutsRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsTimeoutsRatesOK), nil

}

/*
GetWriteMetricsUnavailables gets write metrics unavailables

Get write metrics
*/
func (a *Client) GetWriteMetricsUnavailables(params *GetWriteMetricsUnavailablesParams) (*GetWriteMetricsUnavailablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsUnavailablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_unavailables",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/unavailables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsUnavailablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsUnavailablesOK), nil

}

/*
GetWriteMetricsUnavailablesRates gets write metrics unavailables rates

Get write metrics rates
*/
func (a *Client) GetWriteMetricsUnavailablesRates(params *GetWriteMetricsUnavailablesRatesParams) (*GetWriteMetricsUnavailablesRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteMetricsUnavailablesRatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_metrics_unavailables_rates",
		Method:             "GET",
		PathPattern:        "/storage_proxy/metrics/write/unavailables_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteMetricsUnavailablesRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteMetricsUnavailablesRatesOK), nil

}

/*
GetWriteRPCTimeout gets write rpc timeout

Get the write RPC timeout in seconds
*/
func (a *Client) GetWriteRPCTimeout(params *GetWriteRPCTimeoutParams) (*GetWriteRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWriteRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_write_rpc_timeout",
		Method:             "GET",
		PathPattern:        "/storage_proxy/write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWriteRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWriteRPCTimeoutOK), nil

}

/*
InvalidateCounterCache1 invalidates counter cache1

invalidate counter cache
*/
func (a *Client) InvalidateCounterCache1(params *InvalidateCounterCache1Params) (*InvalidateCounterCache1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateCounterCache1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invalidate_counter_cache1",
		Method:             "POST",
		PathPattern:        "/cache_service/invalidate_counter_cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvalidateCounterCache1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvalidateCounterCache1OK), nil

}

/*
InvalidateKeyCache1 invalidates key cache1

invalidate the key cache; for use after invalidating row cache
*/
func (a *Client) InvalidateKeyCache1(params *InvalidateKeyCache1Params) (*InvalidateKeyCache1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateKeyCache1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invalidate_key_cache1",
		Method:             "POST",
		PathPattern:        "/cache_service/invalidate_key_cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvalidateKeyCache1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InvalidateKeyCache1OK), nil

}

/*
IsAutoCompactionDisabled is auto compaction disabled

check if the auto compaction disabled
*/
func (a *Client) IsAutoCompactionDisabled(params *IsAutoCompactionDisabledParams) (*IsAutoCompactionDisabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsAutoCompactionDisabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_auto_compaction_disabled",
		Method:             "GET",
		PathPattern:        "/column_family/autocompaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsAutoCompactionDisabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsAutoCompactionDisabledOK), nil

}

/*
IsGossipRunning is gossip running

allows a user to see whether gossip is running or not
*/
func (a *Client) IsGossipRunning(params *IsGossipRunningParams) (*IsGossipRunningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsGossipRunningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_gossip_running",
		Method:             "GET",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsGossipRunningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsGossipRunningOK), nil

}

/*
IsIncrementalBackupsEnabled is incremental backups enabled

Check if incremental backup is enabled
*/
func (a *Client) IsIncrementalBackupsEnabled(params *IsIncrementalBackupsEnabledParams) (*IsIncrementalBackupsEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsIncrementalBackupsEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_incremental_backups_enabled",
		Method:             "GET",
		PathPattern:        "/storage_service/incremental_backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsIncrementalBackupsEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsIncrementalBackupsEnabledOK), nil

}

/*
IsInitialized is initialized

Determine if gossip is enable
*/
func (a *Client) IsInitialized(params *IsInitializedParams) (*IsInitializedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsInitializedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_initialized",
		Method:             "GET",
		PathPattern:        "/storage_service/is_initialized",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsInitializedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsInitializedOK), nil

}

/*
IsJoined is joined
*/
func (a *Client) IsJoined(params *IsJoinedParams) (*IsJoinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsJoinedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_joined",
		Method:             "GET",
		PathPattern:        "/storage_service/join_ring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsJoinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsJoinedOK), nil

}

/*
IsNativeTransportRunning is native transport running

Is native transport running
*/
func (a *Client) IsNativeTransportRunning(params *IsNativeTransportRunningParams) (*IsNativeTransportRunningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsNativeTransportRunningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_native_transport_running",
		Method:             "GET",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsNativeTransportRunningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsNativeTransportRunningOK), nil

}

/*
IsRPCServerRunning is rpc server running

Determine if thrift is running
*/
func (a *Client) IsRPCServerRunning(params *IsRPCServerRunningParams) (*IsRPCServerRunningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsRPCServerRunningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_rpc_server_running",
		Method:             "GET",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsRPCServerRunningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsRPCServerRunningOK), nil

}

/*
IsStarting is starting

Returns whether the storage service is starting or not
*/
func (a *Client) IsStarting(params *IsStartingParams) (*IsStartingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsStartingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "is_starting",
		Method:             "GET",
		PathPattern:        "/storage_service/is_starting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsStartingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IsStartingOK), nil

}

/*
JoinRing joins ring

Allows a node that have been started without joining the ring to join it
*/
func (a *Client) JoinRing(params *JoinRingParams) (*JoinRingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJoinRingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "join_ring",
		Method:             "POST",
		PathPattern:        "/storage_service/join_ring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JoinRingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JoinRingOK), nil

}

/*
ListEndpointsPendingHints lists endpoints pending hints

List all the endpoints that this node has hints for.
*/
func (a *Client) ListEndpointsPendingHints(params *ListEndpointsPendingHintsParams) (*ListEndpointsPendingHintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEndpointsPendingHintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_endpoints_pending_hints",
		Method:             "GET",
		PathPattern:        "/hinted_handoff/hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEndpointsPendingHintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListEndpointsPendingHintsOK), nil

}

/*
LoadNewSsTables loads new ss tables

Load new SSTables to the given keyspace/columnFamily
*/
func (a *Client) LoadNewSsTables(params *LoadNewSsTablesParams) (*LoadNewSsTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadNewSsTablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "load_new_ss_tables",
		Method:             "POST",
		PathPattern:        "/storage_service/sstables/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadNewSsTablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadNewSsTablesOK), nil

}

/*
LoadNewSstables loads new sstables

Scan through Keyspace/ColumnFamily's data directory determine which SSTables should be loaded and load them
*/
func (a *Client) LoadNewSstables(params *LoadNewSstablesParams) (*LoadNewSstablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoadNewSstablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "load_new_sstables",
		Method:             "POST",
		PathPattern:        "/column_family/load/sstable/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoadNewSstablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoadNewSstablesOK), nil

}

/*
LocalHostid locals hostid

Returns the local host id
*/
func (a *Client) LocalHostid(params *LocalHostidParams) (*LocalHostidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocalHostidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "local_hostid",
		Method:             "GET",
		PathPattern:        "/storage_service/hostid/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocalHostidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LocalHostidOK), nil

}

/*
LsaCompact lsas compact

Force compaction of all regions
*/
func (a *Client) LsaCompact(params *LsaCompactParams) (*LsaCompactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLsaCompactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lsa_compact",
		Method:             "POST",
		PathPattern:        "/lsa/compact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LsaCompactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LsaCompactOK), nil

}

/*
Move moves

This node will unload its data onto its neighbors, and bootstrap to the new token.
*/
func (a *Client) Move(params *MoveParams) (*MoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "move",
		Method:             "POST",
		PathPattern:        "/storage_service/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MoveOK), nil

}

/*
PauseHintsDelivery pauses hints delivery

pause hints delivery
*/
func (a *Client) PauseHintsDelivery(params *PauseHintsDeliveryParams) (*PauseHintsDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseHintsDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pause_hints_delivery",
		Method:             "POST",
		PathPattern:        "/hinted_handoff/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseHintsDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PauseHintsDeliveryOK), nil

}

/*
Rebuild rebuilds

Initiate a process of streaming data for which we are responsible from other nodes. It is similar to bootstrap except meant to be used on a node which is already in the cluster (typically containing no data) as an alternative to running repair.
*/
func (a *Client) Rebuild(params *RebuildParams) (*RebuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rebuild",
		Method:             "POST",
		PathPattern:        "/storage_service/rebuild",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RebuildOK), nil

}

/*
ReloadTriggerClasses reloads trigger classes

Reload trigger classes
*/
func (a *Client) ReloadTriggerClasses(params *ReloadTriggerClassesParams) (*ReloadTriggerClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadTriggerClassesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reload_trigger_classes",
		Method:             "POST",
		PathPattern:        "/storage_proxy/reload_trigger_classes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadTriggerClassesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReloadTriggerClassesOK), nil

}

/*
RemoveNode removes node

Removes token (and all data associated with enpoint that had it) from the ring
*/
func (a *Client) RemoveNode(params *RemoveNodeParams) (*RemoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "remove_node",
		Method:             "POST",
		PathPattern:        "/storage_service/remove_node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveNodeOK), nil

}

/*
RepairAsync repairs async

Invoke repair asynchronously. You can track repair progress by using the get supplying id
*/
func (a *Client) RepairAsync(params *RepairAsyncParams) (*RepairAsyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairAsyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repair_async",
		Method:             "POST",
		PathPattern:        "/storage_service/repair_async/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepairAsyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RepairAsyncOK), nil

}

/*
RepairAsyncStatus repairs async status

Track already running repair progress
*/
func (a *Client) RepairAsyncStatus(params *RepairAsyncStatusParams) (*RepairAsyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairAsyncStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repair_async_status",
		Method:             "GET",
		PathPattern:        "/storage_service/repair_async/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepairAsyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RepairAsyncStatusOK), nil

}

/*
RescheduleFailedDeletions reschedules failed deletions

Reschedule failed deletions
*/
func (a *Client) RescheduleFailedDeletions(params *RescheduleFailedDeletionsParams) (*RescheduleFailedDeletionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRescheduleFailedDeletionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reschedule_failed_deletions",
		Method:             "POST",
		PathPattern:        "/storage_service/reschedule_failed_deletions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RescheduleFailedDeletionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RescheduleFailedDeletionsOK), nil

}

/*
ResetLocalSchema resets local schema

Reset local schema
*/
func (a *Client) ResetLocalSchema(params *ResetLocalSchemaParams) (*ResetLocalSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetLocalSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reset_local_schema",
		Method:             "POST",
		PathPattern:        "/storage_service/relocal_schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetLocalSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResetLocalSchemaOK), nil

}

/*
SampleKeyRange samples key range

Return a List of Tokens representing a sample of keys across all ColumnFamilyStores.
*/
func (a *Client) SampleKeyRange(params *SampleKeyRangeParams) (*SampleKeyRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSampleKeyRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sample_key_range",
		Method:             "GET",
		PathPattern:        "/storage_service/sample_key_range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SampleKeyRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SampleKeyRangeOK), nil

}

/*
SaveCaches1 saves caches1

save row and key caches
*/
func (a *Client) SaveCaches1(params *SaveCaches1Params) (*SaveCaches1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveCaches1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "save_caches1",
		Method:             "POST",
		PathPattern:        "/cache_service/save_caches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveCaches1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveCaches1OK), nil

}

/*
ScheduleHintDelivery schedules hint delivery

force hint delivery to an endpoint
*/
func (a *Client) ScheduleHintDelivery(params *ScheduleHintDeliveryParams) (*ScheduleHintDeliveryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleHintDeliveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "schedule_hint_delivery",
		Method:             "POST",
		PathPattern:        "/hinted_handoff/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScheduleHintDeliveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduleHintDeliveryOK), nil

}

/*
Scrub scrubs

Scrub (deserialize + reserialize at the latest version, skipping bad rows if any) the given keyspace. If columnFamilies array is empty, all CFs are scrubbed. Scrubbed CFs will be snapshotted first, if disableSnapshot is false
*/
func (a *Client) Scrub(params *ScrubParams) (*ScrubOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScrubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scrub",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspace_scrub/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScrubReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScrubOK), nil

}

/*
SetAllLoggerLevel sets all logger level

Set all logger level
*/
func (a *Client) SetAllLoggerLevel(params *SetAllLoggerLevelParams) (*SetAllLoggerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllLoggerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_all_logger_level",
		Method:             "POST",
		PathPattern:        "/system/logger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetAllLoggerLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAllLoggerLevelOK), nil

}

/*
SetBatchSizeFailureThreshold sets batch size failure threshold

Sets the threshold for rejecting queries due to a large batch size
*/
func (a *Client) SetBatchSizeFailureThreshold(params *SetBatchSizeFailureThresholdParams) (*SetBatchSizeFailureThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBatchSizeFailureThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_batch_size_failure_threshold",
		Method:             "POST",
		PathPattern:        "/storage_service/batch_size_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetBatchSizeFailureThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetBatchSizeFailureThresholdOK), nil

}

/*
SetCasContentionTimeout sets cas contention timeout

Set CAS contention timeout
*/
func (a *Client) SetCasContentionTimeout(params *SetCasContentionTimeoutParams) (*SetCasContentionTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCasContentionTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_cas_contention_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/cas_contention_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCasContentionTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCasContentionTimeoutOK), nil

}

/*
SetCompactionStrategyClass sets compaction strategy class

Sets the compaction strategy by class name
*/
func (a *Client) SetCompactionStrategyClass(params *SetCompactionStrategyClassParams) (*SetCompactionStrategyClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCompactionStrategyClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_compaction_strategy_class",
		Method:             "POST",
		PathPattern:        "/column_family/compaction_strategy/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCompactionStrategyClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCompactionStrategyClassOK), nil

}

/*
SetCompactionThreshold sets compaction threshold

Sets the minumum and maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) SetCompactionThreshold(params *SetCompactionThresholdParams) (*SetCompactionThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCompactionThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_compaction_threshold",
		Method:             "POST",
		PathPattern:        "/column_family/compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCompactionThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCompactionThresholdOK), nil

}

/*
SetCompactionThroughputMbPerSec sets compaction throughput mb per sec

Set compaction throughput mb per sec
*/
func (a *Client) SetCompactionThroughputMbPerSec(params *SetCompactionThroughputMbPerSecParams) (*SetCompactionThroughputMbPerSecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCompactionThroughputMbPerSecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_compaction_throughput_mb_per_sec",
		Method:             "POST",
		PathPattern:        "/storage_service/compaction_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCompactionThroughputMbPerSecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCompactionThroughputMbPerSecOK), nil

}

/*
SetCompressionParameters sets compression parameters

Sets the compression parameters
*/
func (a *Client) SetCompressionParameters(params *SetCompressionParametersParams) (*SetCompressionParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCompressionParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_compression_parameters",
		Method:             "POST",
		PathPattern:        "/column_family/compression_parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCompressionParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCompressionParametersOK), nil

}

/*
SetCounterCacheCapacityInMb1 sets counter cache capacity in mb1

set counter cache capacity in mb
*/
func (a *Client) SetCounterCacheCapacityInMb1(params *SetCounterCacheCapacityInMb1Params) (*SetCounterCacheCapacityInMb1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCounterCacheCapacityInMb1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_counter_cache_capacity_in_mb1",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCounterCacheCapacityInMb1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCounterCacheCapacityInMb1OK), nil

}

/*
SetCounterCacheKeysToSave1 sets counter cache keys to save1

set counter cache keys to save
*/
func (a *Client) SetCounterCacheKeysToSave1(params *SetCounterCacheKeysToSave1Params) (*SetCounterCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCounterCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_counter_cache_keys_to_save1",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCounterCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCounterCacheKeysToSave1OK), nil

}

/*
SetCounterCacheSavePeriodInSeconds1 sets counter cache save period in seconds1

set counter cache save period in seconds
*/
func (a *Client) SetCounterCacheSavePeriodInSeconds1(params *SetCounterCacheSavePeriodInSeconds1Params) (*SetCounterCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCounterCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_counter_cache_save_period_in_seconds1",
		Method:             "POST",
		PathPattern:        "/cache_service/counter_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCounterCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCounterCacheSavePeriodInSeconds1OK), nil

}

/*
SetCounterWriteRPCTimeout sets counter write rpc timeout

Set counter write rpc timeout
*/
func (a *Client) SetCounterWriteRPCTimeout(params *SetCounterWriteRPCTimeoutParams) (*SetCounterWriteRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCounterWriteRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_counter_write_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/counter_write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCounterWriteRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCounterWriteRPCTimeoutOK), nil

}

/*
SetCrcCheckChance sets crc check chance

Set new crc check chance
*/
func (a *Client) SetCrcCheckChance(params *SetCrcCheckChanceParams) (*SetCrcCheckChanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCrcCheckChanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_crc_check_chance",
		Method:             "POST",
		PathPattern:        "/column_family/crc_check_chance/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetCrcCheckChanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetCrcCheckChanceOK), nil

}

/*
SetHintedHandoffEnabled sets hinted handoff enabled

Set hinted handoff status
*/
func (a *Client) SetHintedHandoffEnabled(params *SetHintedHandoffEnabledParams) (*SetHintedHandoffEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetHintedHandoffEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_hinted_handoff_enabled",
		Method:             "POST",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetHintedHandoffEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetHintedHandoffEnabledOK), nil

}

/*
SetHintedHandoffEnabledByDcList sets hinted handoff enabled by dc list

Set the hinted handoff enabled by dc
*/
func (a *Client) SetHintedHandoffEnabledByDcList(params *SetHintedHandoffEnabledByDcListParams) (*SetHintedHandoffEnabledByDcListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetHintedHandoffEnabledByDcListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_hinted_handoff_enabled_by_dc_list",
		Method:             "POST",
		PathPattern:        "/storage_proxy/hinted_handoff_enabled_by_dc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetHintedHandoffEnabledByDcListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetHintedHandoffEnabledByDcListOK), nil

}

/*
SetHintedHandoffThrottleInKb sets hinted handoff throttle in kb

Sets the hinted handoff throttle in kb per second, per delivery thread
*/
func (a *Client) SetHintedHandoffThrottleInKb(params *SetHintedHandoffThrottleInKbParams) (*SetHintedHandoffThrottleInKbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetHintedHandoffThrottleInKbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_hinted_handoff_throttle_in_kb",
		Method:             "POST",
		PathPattern:        "/storage_service/hinted_handoff",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetHintedHandoffThrottleInKbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetHintedHandoffThrottleInKbOK), nil

}

/*
SetIncrementalBackupsEnabled sets incremental backups enabled
*/
func (a *Client) SetIncrementalBackupsEnabled(params *SetIncrementalBackupsEnabledParams) (*SetIncrementalBackupsEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetIncrementalBackupsEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_incremental_backups_enabled",
		Method:             "POST",
		PathPattern:        "/storage_service/incremental_backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetIncrementalBackupsEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetIncrementalBackupsEnabledOK), nil

}

/*
SetKeyCacheCapacityInMb1 sets key cache capacity in mb1

set key cache capacity in mb
*/
func (a *Client) SetKeyCacheCapacityInMb1(params *SetKeyCacheCapacityInMb1Params) (*SetKeyCacheCapacityInMb1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKeyCacheCapacityInMb1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_key_cache_capacity_in_mb1",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetKeyCacheCapacityInMb1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetKeyCacheCapacityInMb1OK), nil

}

/*
SetKeyCacheKeysToSave1 sets key cache keys to save1

set key cache keys to save
*/
func (a *Client) SetKeyCacheKeysToSave1(params *SetKeyCacheKeysToSave1Params) (*SetKeyCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKeyCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_key_cache_keys_to_save1",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetKeyCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetKeyCacheKeysToSave1OK), nil

}

/*
SetKeyCacheSavePeriodInSeconds1 sets key cache save period in seconds1

set key cache save period in seconds
*/
func (a *Client) SetKeyCacheSavePeriodInSeconds1(params *SetKeyCacheSavePeriodInSeconds1Params) (*SetKeyCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetKeyCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_key_cache_save_period_in_seconds1",
		Method:             "POST",
		PathPattern:        "/cache_service/key_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetKeyCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetKeyCacheSavePeriodInSeconds1OK), nil

}

/*
SetLoggerLevel sets logger level

Set logger level
*/
func (a *Client) SetLoggerLevel(params *SetLoggerLevelParams) (*SetLoggerLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetLoggerLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_logger_level",
		Method:             "POST",
		PathPattern:        "/system/logger/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetLoggerLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetLoggerLevelOK), nil

}

/*
SetLoggingLevel sets logging level

set the logging level at runtime<br> <br> If both classQualifer and level are empty/null, it will reload the configuration to reset.<br> If classQualifer is not empty but level is empty/null, it will set the level to null for the defined classQualifer<br> If level cannot be parsed, then the level will be defaulted to DEBUG<br> <br> The logback configuration should have < jmxConfigurator /> set
*/
func (a *Client) SetLoggingLevel(params *SetLoggingLevelParams) (*SetLoggingLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetLoggingLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_logging_level",
		Method:             "POST",
		PathPattern:        "/storage_service/logging_level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetLoggingLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetLoggingLevelOK), nil

}

/*
SetMaxHintWindow sets max hint window

Set the max hint window
*/
func (a *Client) SetMaxHintWindow(params *SetMaxHintWindowParams) (*SetMaxHintWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMaxHintWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_max_hint_window",
		Method:             "POST",
		PathPattern:        "/storage_proxy/max_hint_window",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetMaxHintWindowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetMaxHintWindowOK), nil

}

/*
SetMaxHintsInProgress sets max hints in progress

Set max hints in progress
*/
func (a *Client) SetMaxHintsInProgress(params *SetMaxHintsInProgressParams) (*SetMaxHintsInProgressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMaxHintsInProgressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_max_hints_in_progress",
		Method:             "POST",
		PathPattern:        "/storage_proxy/max_hints_in_progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetMaxHintsInProgressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetMaxHintsInProgressOK), nil

}

/*
SetMaximumCompactionThreshold sets maximum compaction threshold

Sets the maximum number of sstables in queue before compaction kicks off
*/
func (a *Client) SetMaximumCompactionThreshold(params *SetMaximumCompactionThresholdParams) (*SetMaximumCompactionThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMaximumCompactionThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_maximum_compaction_threshold",
		Method:             "POST",
		PathPattern:        "/column_family/maximum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetMaximumCompactionThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetMaximumCompactionThresholdOK), nil

}

/*
SetMinimumCompactionThreshold sets minimum compaction threshold

Sets the minimum number of sstables in queue before compaction kicks off
*/
func (a *Client) SetMinimumCompactionThreshold(params *SetMinimumCompactionThresholdParams) (*SetMinimumCompactionThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMinimumCompactionThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_minimum_compaction_threshold",
		Method:             "POST",
		PathPattern:        "/column_family/minimum_compaction/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetMinimumCompactionThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetMinimumCompactionThresholdOK), nil

}

/*
SetPhiConvictThreshold sets phi convict threshold

Set the phi convict threshold
*/
func (a *Client) SetPhiConvictThreshold(params *SetPhiConvictThresholdParams) (*SetPhiConvictThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPhiConvictThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_phi_convict_threshold",
		Method:             "POST",
		PathPattern:        "/failure_detector/phi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPhiConvictThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPhiConvictThresholdOK), nil

}

/*
SetRangeRPCTimeout sets range rpc timeout

Set range rpc timeout
*/
func (a *Client) SetRangeRPCTimeout(params *SetRangeRPCTimeoutParams) (*SetRangeRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRangeRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_range_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/range_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRangeRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRangeRPCTimeoutOK), nil

}

/*
SetReadRPCTimeout sets read rpc timeout

Set the read RPC timeout
*/
func (a *Client) SetReadRPCTimeout(params *SetReadRPCTimeoutParams) (*SetReadRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetReadRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_read_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/read_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetReadRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetReadRPCTimeoutOK), nil

}

/*
SetRowCacheCapacityInMb1 sets row cache capacity in mb1

set row cache capacity in mb
*/
func (a *Client) SetRowCacheCapacityInMb1(params *SetRowCacheCapacityInMb1Params) (*SetRowCacheCapacityInMb1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRowCacheCapacityInMb1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_row_cache_capacity_in_mb1",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_capacity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRowCacheCapacityInMb1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRowCacheCapacityInMb1OK), nil

}

/*
SetRowCacheKeysToSave1 sets row cache keys to save1

set row cache keys to save
*/
func (a *Client) SetRowCacheKeysToSave1(params *SetRowCacheKeysToSave1Params) (*SetRowCacheKeysToSave1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRowCacheKeysToSave1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_row_cache_keys_to_save1",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_keys_to_save",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRowCacheKeysToSave1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRowCacheKeysToSave1OK), nil

}

/*
SetRowCacheSavePeriodInSeconds1 sets row cache save period in seconds1

set row cache save period in seconds
*/
func (a *Client) SetRowCacheSavePeriodInSeconds1(params *SetRowCacheSavePeriodInSeconds1Params) (*SetRowCacheSavePeriodInSeconds1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRowCacheSavePeriodInSeconds1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_row_cache_save_period_in_seconds1",
		Method:             "POST",
		PathPattern:        "/cache_service/row_cache_save_period",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRowCacheSavePeriodInSeconds1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRowCacheSavePeriodInSeconds1OK), nil

}

/*
SetRPCTimeout sets rpc timeout

Set the RPC timeout
*/
func (a *Client) SetRPCTimeout(params *SetRPCTimeoutParams) (*SetRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetRPCTimeoutOK), nil

}

/*
SetSlowQuery sets slow query

Set slow query parameter
*/
func (a *Client) SetSlowQuery(params *SetSlowQueryParams) (*SetSlowQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSlowQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_slow_query",
		Method:             "POST",
		PathPattern:        "/storage_service/slow_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSlowQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetSlowQueryOK), nil

}

/*
SetStreamThroughputMbPerSec sets stream throughput mb per sec

set stream throughput mb per sec
*/
func (a *Client) SetStreamThroughputMbPerSec(params *SetStreamThroughputMbPerSecParams) (*SetStreamThroughputMbPerSecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStreamThroughputMbPerSecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_stream_throughput_mb_per_sec",
		Method:             "POST",
		PathPattern:        "/storage_service/stream_throughput",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetStreamThroughputMbPerSecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetStreamThroughputMbPerSecOK), nil

}

/*
SetTombstoneFailureThreshold sets tombstone failure threshold
*/
func (a *Client) SetTombstoneFailureThreshold(params *SetTombstoneFailureThresholdParams) (*SetTombstoneFailureThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTombstoneFailureThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_tombstone_failure_threshold",
		Method:             "POST",
		PathPattern:        "/storage_service/tombstone_failure_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTombstoneFailureThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTombstoneFailureThresholdOK), nil

}

/*
SetTombstoneWarnThreshold sets tombstone warn threshold

Sets the threshold for warning queries with many tombstones
*/
func (a *Client) SetTombstoneWarnThreshold(params *SetTombstoneWarnThresholdParams) (*SetTombstoneWarnThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTombstoneWarnThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_tombstone_warn_threshold",
		Method:             "POST",
		PathPattern:        "/storage_service/tombstone_warn_threshold",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTombstoneWarnThresholdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTombstoneWarnThresholdOK), nil

}

/*
SetTraceProbability sets trace probability

Enables/Disables tracing for the whole system. Only thrift requests can start tracing currently
*/
func (a *Client) SetTraceProbability(params *SetTraceProbabilityParams) (*SetTraceProbabilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTraceProbabilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_trace_probability",
		Method:             "POST",
		PathPattern:        "/storage_service/trace_probability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTraceProbabilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTraceProbabilityOK), nil

}

/*
SetTruncateRPCTimeout sets truncate rpc timeout

Set truncate rpc timeout
*/
func (a *Client) SetTruncateRPCTimeout(params *SetTruncateRPCTimeoutParams) (*SetTruncateRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTruncateRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_truncate_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/truncate_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetTruncateRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetTruncateRPCTimeoutOK), nil

}

/*
SetWriteRPCTimeout sets write rpc timeout

Set the write RPC timeout
*/
func (a *Client) SetWriteRPCTimeout(params *SetWriteRPCTimeoutParams) (*SetWriteRPCTimeoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWriteRPCTimeoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "set_write_rpc_timeout",
		Method:             "POST",
		PathPattern:        "/storage_proxy/write_rpc_timeout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetWriteRPCTimeoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetWriteRPCTimeoutOK), nil

}

/*
StartGossiping starts gossiping

allows a user to recover a forcibly 'killed' node
*/
func (a *Client) StartGossiping(params *StartGossipingParams) (*StartGossipingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartGossipingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start_gossiping",
		Method:             "POST",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartGossipingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartGossipingOK), nil

}

/*
StartNativeTransport starts native transport

Start native transport
*/
func (a *Client) StartNativeTransport(params *StartNativeTransportParams) (*StartNativeTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartNativeTransportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start_native_transport",
		Method:             "POST",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartNativeTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartNativeTransportOK), nil

}

/*
StartRPCServer starts rpc server

allows a user to reenable thrift
*/
func (a *Client) StartRPCServer(params *StartRPCServerParams) (*StartRPCServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartRPCServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "start_rpc_server",
		Method:             "POST",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartRPCServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartRPCServerOK), nil

}

/*
StopCompaction stops compaction

Stop all running compaction-like tasks having the provided type
*/
func (a *Client) StopCompaction(params *StopCompactionParams) (*StopCompactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopCompactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop_compaction",
		Method:             "POST",
		PathPattern:        "/compaction_manager/stop_compaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopCompactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopCompactionOK), nil

}

/*
StopDaemon stops daemon

allows a user to forcibly completely stop cassandra
*/
func (a *Client) StopDaemon(params *StopDaemonParams) (*StopDaemonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDaemonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop_daemon",
		Method:             "POST",
		PathPattern:        "/storage_service/stop_daemon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopDaemonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopDaemonOK), nil

}

/*
StopGossiping stops gossiping

allows a user to forcibly 'kill' a sick node
*/
func (a *Client) StopGossiping(params *StopGossipingParams) (*StopGossipingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopGossipingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop_gossiping",
		Method:             "DELETE",
		PathPattern:        "/storage_service/gossiping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopGossipingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopGossipingOK), nil

}

/*
StopNativeTransport stops native transport

Stop native transport
*/
func (a *Client) StopNativeTransport(params *StopNativeTransportParams) (*StopNativeTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopNativeTransportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop_native_transport",
		Method:             "DELETE",
		PathPattern:        "/storage_service/native_transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopNativeTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopNativeTransportOK), nil

}

/*
StopRPCServer stops rpc server

Allows a user to disable thrift
*/
func (a *Client) StopRPCServer(params *StopRPCServerParams) (*StopRPCServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopRPCServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stop_rpc_server",
		Method:             "DELETE",
		PathPattern:        "/storage_service/rpc_server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopRPCServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopRPCServerOK), nil

}

/*
TakeSnapshot takes snapshot

Takes the snapshot for the given keyspaces. A snapshot name must be specified.
*/
func (a *Client) TakeSnapshot(params *TakeSnapshotParams) (*TakeSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTakeSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "take_snapshot",
		Method:             "POST",
		PathPattern:        "/storage_service/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TakeSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TakeSnapshotOK), nil

}

/*
TrueSnapshotsSize trues snapshots size

Get the true size taken by all snapshots across all keyspaces.
*/
func (a *Client) TrueSnapshotsSize(params *TrueSnapshotsSizeParams) (*TrueSnapshotsSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrueSnapshotsSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "true_snapshots_size",
		Method:             "GET",
		PathPattern:        "/storage_service/snapshots/size/true",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TrueSnapshotsSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TrueSnapshotsSizeOK), nil

}

/*
Truncate truncates

Truncates (deletes) the given columnFamily from the provided keyspace. Calling truncate results in actual deletion of all data in the cluster under the given columnFamily and it will fail unless all hosts are up. All data in the given column family will be deleted, but its definition will not be affected.
*/
func (a *Client) Truncate(params *TruncateParams) (*TruncateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTruncateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "truncate",
		Method:             "POST",
		PathPattern:        "/storage_service/truncate/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TruncateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TruncateOK), nil

}

/*
TruncateAllHints truncates all hints

Truncate all the hints
*/
func (a *Client) TruncateAllHints(params *TruncateAllHintsParams) (*TruncateAllHintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTruncateAllHintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "truncate_all_hints",
		Method:             "DELETE",
		PathPattern:        "/hinted_handoff/hints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TruncateAllHintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TruncateAllHintsOK), nil

}

/*
UpdateSnitch updates snitch

Change endpointsnitch class and dynamic-ness (and dynamic attributes) at runtime
*/
func (a *Client) UpdateSnitch(params *UpdateSnitchParams) (*UpdateSnitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnitchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_snitch",
		Method:             "POST",
		PathPattern:        "/storage_service/update_snitch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnitchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnitchOK), nil

}

/*
UpgradeSstables upgrades sstables

Rewrite all sstables to the latest version. Unlike scrub, it doesn't skip bad rows and do not snapshot sstables first.
*/
func (a *Client) UpgradeSstables(params *UpgradeSstablesParams) (*UpgradeSstablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeSstablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgrade_sstables",
		Method:             "GET",
		PathPattern:        "/storage_service/keyspace_upgrade_sstables/{keyspace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpgradeSstablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeSstablesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
