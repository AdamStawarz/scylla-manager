// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLoadNewSsTablesParams creates a new LoadNewSsTablesParams object
// with the default values initialized.
func NewLoadNewSsTablesParams() *LoadNewSsTablesParams {
	var ()
	return &LoadNewSsTablesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoadNewSsTablesParamsWithTimeout creates a new LoadNewSsTablesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoadNewSsTablesParamsWithTimeout(timeout time.Duration) *LoadNewSsTablesParams {
	var ()
	return &LoadNewSsTablesParams{

		timeout: timeout,
	}
}

// NewLoadNewSsTablesParamsWithContext creates a new LoadNewSsTablesParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoadNewSsTablesParamsWithContext(ctx context.Context) *LoadNewSsTablesParams {
	var ()
	return &LoadNewSsTablesParams{

		Context: ctx,
	}
}

// NewLoadNewSsTablesParamsWithHTTPClient creates a new LoadNewSsTablesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoadNewSsTablesParamsWithHTTPClient(client *http.Client) *LoadNewSsTablesParams {
	var ()
	return &LoadNewSsTablesParams{
		HTTPClient: client,
	}
}

/*LoadNewSsTablesParams contains all the parameters to send to the API endpoint
for the load new ss tables operation typically these are written to a http.Request
*/
type LoadNewSsTablesParams struct {

	/*Cf
	  Column family name

	*/
	Cf string
	/*Keyspace
	  The keyspace

	*/
	Keyspace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the load new ss tables params
func (o *LoadNewSsTablesParams) WithTimeout(timeout time.Duration) *LoadNewSsTablesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the load new ss tables params
func (o *LoadNewSsTablesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the load new ss tables params
func (o *LoadNewSsTablesParams) WithContext(ctx context.Context) *LoadNewSsTablesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the load new ss tables params
func (o *LoadNewSsTablesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the load new ss tables params
func (o *LoadNewSsTablesParams) WithHTTPClient(client *http.Client) *LoadNewSsTablesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the load new ss tables params
func (o *LoadNewSsTablesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCf adds the cf to the load new ss tables params
func (o *LoadNewSsTablesParams) WithCf(cf string) *LoadNewSsTablesParams {
	o.SetCf(cf)
	return o
}

// SetCf adds the cf to the load new ss tables params
func (o *LoadNewSsTablesParams) SetCf(cf string) {
	o.Cf = cf
}

// WithKeyspace adds the keyspace to the load new ss tables params
func (o *LoadNewSsTablesParams) WithKeyspace(keyspace string) *LoadNewSsTablesParams {
	o.SetKeyspace(keyspace)
	return o
}

// SetKeyspace adds the keyspace to the load new ss tables params
func (o *LoadNewSsTablesParams) SetKeyspace(keyspace string) {
	o.Keyspace = keyspace
}

// WriteToRequest writes these params to a swagger request
func (o *LoadNewSsTablesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cf
	qrCf := o.Cf
	qCf := qrCf
	if qCf != "" {
		if err := r.SetQueryParam("cf", qCf); err != nil {
			return err
		}
	}

	// path param keyspace
	if err := r.SetPathParam("keyspace", o.Keyspace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
