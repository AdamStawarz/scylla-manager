// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/scylladb/mermaid/mermaidclient/internal/models"
)

// PutClusterClusterIDReader is a Reader for the PutClusterClusterID structure.
type PutClusterClusterIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutClusterClusterIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutClusterClusterIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutClusterClusterIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutClusterClusterIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutClusterClusterIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutClusterClusterIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutClusterClusterIDOK creates a PutClusterClusterIDOK with default headers values
func NewPutClusterClusterIDOK() *PutClusterClusterIDOK {
	return &PutClusterClusterIDOK{}
}

/*PutClusterClusterIDOK handles this case with default header values.

Updated cluster info
*/
type PutClusterClusterIDOK struct {
	Payload *models.Cluster
}

func (o *PutClusterClusterIDOK) Error() string {
	return fmt.Sprintf("[PUT /cluster/{cluster_id}][%d] putClusterClusterIdOK  %+v", 200, o.Payload)
}

func (o *PutClusterClusterIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClusterClusterIDBadRequest creates a PutClusterClusterIDBadRequest with default headers values
func NewPutClusterClusterIDBadRequest() *PutClusterClusterIDBadRequest {
	return &PutClusterClusterIDBadRequest{}
}

/*PutClusterClusterIDBadRequest handles this case with default header values.

Bad Request
*/
type PutClusterClusterIDBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PutClusterClusterIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cluster/{cluster_id}][%d] putClusterClusterIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutClusterClusterIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClusterClusterIDNotFound creates a PutClusterClusterIDNotFound with default headers values
func NewPutClusterClusterIDNotFound() *PutClusterClusterIDNotFound {
	return &PutClusterClusterIDNotFound{}
}

/*PutClusterClusterIDNotFound handles this case with default header values.

Not found
*/
type PutClusterClusterIDNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PutClusterClusterIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /cluster/{cluster_id}][%d] putClusterClusterIdNotFound  %+v", 404, o.Payload)
}

func (o *PutClusterClusterIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClusterClusterIDInternalServerError creates a PutClusterClusterIDInternalServerError with default headers values
func NewPutClusterClusterIDInternalServerError() *PutClusterClusterIDInternalServerError {
	return &PutClusterClusterIDInternalServerError{}
}

/*PutClusterClusterIDInternalServerError handles this case with default header values.

Server error
*/
type PutClusterClusterIDInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PutClusterClusterIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cluster/{cluster_id}][%d] putClusterClusterIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutClusterClusterIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClusterClusterIDDefault creates a PutClusterClusterIDDefault with default headers values
func NewPutClusterClusterIDDefault(code int) *PutClusterClusterIDDefault {
	return &PutClusterClusterIDDefault{
		_statusCode: code,
	}
}

/*PutClusterClusterIDDefault handles this case with default header values.

Unexpected error
*/
type PutClusterClusterIDDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the put cluster cluster ID default response
func (o *PutClusterClusterIDDefault) Code() int {
	return o._statusCode
}

func (o *PutClusterClusterIDDefault) Error() string {
	return fmt.Sprintf("[PUT /cluster/{cluster_id}][%d] PutClusterClusterID default  %+v", o._statusCode, o.Payload)
}

func (o *PutClusterClusterIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
