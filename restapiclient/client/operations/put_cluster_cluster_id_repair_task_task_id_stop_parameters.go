// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutClusterClusterIDRepairTaskTaskIDStopParams creates a new PutClusterClusterIDRepairTaskTaskIDStopParams object
// with the default values initialized.
func NewPutClusterClusterIDRepairTaskTaskIDStopParams() *PutClusterClusterIDRepairTaskTaskIDStopParams {
	var ()
	return &PutClusterClusterIDRepairTaskTaskIDStopParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithTimeout creates a new PutClusterClusterIDRepairTaskTaskIDStopParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithTimeout(timeout time.Duration) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	var ()
	return &PutClusterClusterIDRepairTaskTaskIDStopParams{

		timeout: timeout,
	}
}

// NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithContext creates a new PutClusterClusterIDRepairTaskTaskIDStopParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithContext(ctx context.Context) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	var ()
	return &PutClusterClusterIDRepairTaskTaskIDStopParams{

		Context: ctx,
	}
}

// NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithHTTPClient creates a new PutClusterClusterIDRepairTaskTaskIDStopParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutClusterClusterIDRepairTaskTaskIDStopParamsWithHTTPClient(client *http.Client) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	var ()
	return &PutClusterClusterIDRepairTaskTaskIDStopParams{
		HTTPClient: client,
	}
}

/*PutClusterClusterIDRepairTaskTaskIDStopParams contains all the parameters to send to the API endpoint
for the put cluster cluster ID repair task task ID stop operation typically these are written to a http.Request
*/
type PutClusterClusterIDRepairTaskTaskIDStopParams struct {

	/*ClusterID
	  cluster ID this API is performing on

	*/
	ClusterID string
	/*TaskID
	  task ID requesting the stats

	*/
	TaskID string
	/*UnitID
	  target unit UUID

	*/
	UnitID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithTimeout(timeout time.Duration) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithContext(ctx context.Context) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithHTTPClient(client *http.Client) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithClusterID(clusterID string) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithTaskID adds the taskID to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithTaskID(taskID string) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetTaskID(taskID string) {
	o.TaskID = taskID
}

// WithUnitID adds the unitID to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WithUnitID(unitID string) *PutClusterClusterIDRepairTaskTaskIDStopParams {
	o.SetUnitID(unitID)
	return o
}

// SetUnitID adds the unitId to the put cluster cluster ID repair task task ID stop params
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) SetUnitID(unitID string) {
	o.UnitID = unitID
}

// WriteToRequest writes these params to a swagger request
func (o *PutClusterClusterIDRepairTaskTaskIDStopParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster_id
	if err := r.SetPathParam("cluster_id", o.ClusterID); err != nil {
		return err
	}

	// path param task_id
	if err := r.SetPathParam("task_id", o.TaskID); err != nil {
		return err
	}

	// query param unit_id
	qrUnitID := o.UnitID
	qUnitID := qrUnitID
	if qUnitID != "" {
		if err := r.SetQueryParam("unit_id", qUnitID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
