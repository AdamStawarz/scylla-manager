// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteClusterClusterIDRepairConfig deleteConfig cluster description
*/
func (a *Client) DeleteClusterClusterIDRepairConfig(params *DeleteClusterClusterIDRepairConfigParams) (*DeleteClusterClusterIDRepairConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDRepairConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClusterClusterIDRepairConfig",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}/repair/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDRepairConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterClusterIDRepairConfigOK), nil

}

/*
DeleteClusterClusterIDRepairConfigConfigTypeExternalID deleteConfig cluster description
*/
func (a *Client) DeleteClusterClusterIDRepairConfigConfigTypeExternalID(params *DeleteClusterClusterIDRepairConfigConfigTypeExternalIDParams) (*DeleteClusterClusterIDRepairConfigConfigTypeExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDRepairConfigConfigTypeExternalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClusterClusterIDRepairConfigConfigTypeExternalID",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}/repair/config/{config_type}/{external_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDRepairConfigConfigTypeExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterClusterIDRepairConfigConfigTypeExternalIDOK), nil

}

/*
DeleteClusterClusterIDRepairUnitUnitID deleteUnit Description
*/
func (a *Client) DeleteClusterClusterIDRepairUnitUnitID(params *DeleteClusterClusterIDRepairUnitUnitIDParams) (*DeleteClusterClusterIDRepairUnitUnitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterClusterIDRepairUnitUnitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClusterClusterIDRepairUnitUnitID",
		Method:             "DELETE",
		PathPattern:        "/cluster/{cluster_id}/repair/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterClusterIDRepairUnitUnitIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterClusterIDRepairUnitUnitIDOK), nil

}

/*
GetClusterClusterIDRepairConfig getConfig cluster description
*/
func (a *Client) GetClusterClusterIDRepairConfig(params *GetClusterClusterIDRepairConfigParams) (*GetClusterClusterIDRepairConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDRepairConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClusterClusterIDRepairConfig",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/repair/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDRepairConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterClusterIDRepairConfigOK), nil

}

/*
GetClusterClusterIDRepairConfigConfigTypeExternalID getConfig cluster description
*/
func (a *Client) GetClusterClusterIDRepairConfigConfigTypeExternalID(params *GetClusterClusterIDRepairConfigConfigTypeExternalIDParams) (*GetClusterClusterIDRepairConfigConfigTypeExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDRepairConfigConfigTypeExternalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClusterClusterIDRepairConfigConfigTypeExternalID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/repair/config/{config_type}/{external_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDRepairConfigConfigTypeExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterClusterIDRepairConfigConfigTypeExternalIDOK), nil

}

/*
GetClusterClusterIDRepairUnitUnitID loadUnit Description
*/
func (a *Client) GetClusterClusterIDRepairUnitUnitID(params *GetClusterClusterIDRepairUnitUnitIDParams) (*GetClusterClusterIDRepairUnitUnitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDRepairUnitUnitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClusterClusterIDRepairUnitUnitID",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/repair/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDRepairUnitUnitIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterClusterIDRepairUnitUnitIDOK), nil

}

/*
GetClusterClusterIDRepairUnits listUnits Description
*/
func (a *Client) GetClusterClusterIDRepairUnits(params *GetClusterClusterIDRepairUnitsParams) (*GetClusterClusterIDRepairUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterClusterIDRepairUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClusterClusterIDRepairUnits",
		Method:             "GET",
		PathPattern:        "/cluster/{cluster_id}/repair/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterClusterIDRepairUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterClusterIDRepairUnitsOK), nil

}

/*
PostClusterClusterIDRepairUnits createUnit Description
*/
func (a *Client) PostClusterClusterIDRepairUnits(params *PostClusterClusterIDRepairUnitsParams) (*PostClusterClusterIDRepairUnitsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClusterClusterIDRepairUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClusterClusterIDRepairUnits",
		Method:             "POST",
		PathPattern:        "/cluster/{cluster_id}/repair/units",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClusterClusterIDRepairUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClusterClusterIDRepairUnitsCreated), nil

}

/*
PutClusterClusterIDRepairConfig updateConfig cluster description
*/
func (a *Client) PutClusterClusterIDRepairConfig(params *PutClusterClusterIDRepairConfigParams) (*PutClusterClusterIDRepairConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairConfig",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repair/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterClusterIDRepairConfigOK), nil

}

/*
PutClusterClusterIDRepairConfigConfigTypeExternalID updateConfig cluster description
*/
func (a *Client) PutClusterClusterIDRepairConfigConfigTypeExternalID(params *PutClusterClusterIDRepairConfigConfigTypeExternalIDParams) (*PutClusterClusterIDRepairConfigConfigTypeExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairConfigConfigTypeExternalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairConfigConfigTypeExternalID",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repair/config/{config_type}/{external_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairConfigConfigTypeExternalIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterClusterIDRepairConfigConfigTypeExternalIDOK), nil

}

/*
PutClusterClusterIDRepairUnitUnitID updateUnit Description
*/
func (a *Client) PutClusterClusterIDRepairUnitUnitID(params *PutClusterClusterIDRepairUnitUnitIDParams) (*PutClusterClusterIDRepairUnitUnitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairUnitUnitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairUnitUnitID",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repair/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairUnitUnitIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterClusterIDRepairUnitUnitIDOK), nil

}

/*
PutClusterClusterIDRepairUnitUnitIDRepair put cluster cluster ID repair unit unit ID repair API
*/
func (a *Client) PutClusterClusterIDRepairUnitUnitIDRepair(params *PutClusterClusterIDRepairUnitUnitIDRepairParams) (*PutClusterClusterIDRepairUnitUnitIDRepairOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterClusterIDRepairUnitUnitIDRepairParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutClusterClusterIDRepairUnitUnitIDRepair",
		Method:             "PUT",
		PathPattern:        "/cluster/{cluster_id}/repair/unit/{unit_id}/repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutClusterClusterIDRepairUnitUnitIDRepairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterClusterIDRepairUnitUnitIDRepairOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
