// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scylladb/mermaid/restapi (interfaces: RepairService)

// Package restapi is a generated GoMock package.
package restapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repair "github.com/scylladb/mermaid/repair"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// mockRepairService is a mock of RepairService interface
type mockRepairService struct {
	ctrl     *gomock.Controller
	recorder *mockRepairServiceMockRecorder
}

// mockRepairServiceMockRecorder is the mock recorder for mockRepairService
type mockRepairServiceMockRecorder struct {
	mock *mockRepairService
}

// NewmockRepairService creates a new mock instance
func NewmockRepairService(ctrl *gomock.Controller) *mockRepairService {
	mock := &mockRepairService{ctrl: ctrl}
	mock.recorder = &mockRepairServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockRepairService) EXPECT() *mockRepairServiceMockRecorder {
	return m.recorder
}

// DeleteUnit mocks base method
func (m *mockRepairService) DeleteUnit(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit
func (mr *mockRepairServiceMockRecorder) DeleteUnit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*mockRepairService)(nil).DeleteUnit), arg0, arg1, arg2)
}

// GetLastRun mocks base method
func (m *mockRepairService) GetLastRun(arg0 context.Context, arg1 *repair.Unit) (*repair.Run, error) {
	ret := m.ctrl.Call(m, "GetLastRun", arg0, arg1)
	ret0, _ := ret[0].(*repair.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRun indicates an expected call of GetLastRun
func (mr *mockRepairServiceMockRecorder) GetLastRun(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRun", reflect.TypeOf((*mockRepairService)(nil).GetLastRun), arg0, arg1)
}

// GetProgress mocks base method
func (m *mockRepairService) GetProgress(arg0 context.Context, arg1 *repair.Unit, arg2 uuid.UUID, arg3 ...string) ([]*repair.RunProgress, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProgress", varargs...)
	ret0, _ := ret[0].([]*repair.RunProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgress indicates an expected call of GetProgress
func (mr *mockRepairServiceMockRecorder) GetProgress(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*mockRepairService)(nil).GetProgress), varargs...)
}

// GetRun mocks base method
func (m *mockRepairService) GetRun(arg0 context.Context, arg1 *repair.Unit, arg2 uuid.UUID) (*repair.Run, error) {
	ret := m.ctrl.Call(m, "GetRun", arg0, arg1, arg2)
	ret0, _ := ret[0].(*repair.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun
func (mr *mockRepairServiceMockRecorder) GetRun(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*mockRepairService)(nil).GetRun), arg0, arg1, arg2)
}

// GetUnit mocks base method
func (m *mockRepairService) GetUnit(arg0 context.Context, arg1 uuid.UUID, arg2 string) (*repair.Unit, error) {
	ret := m.ctrl.Call(m, "GetUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*repair.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnit indicates an expected call of GetUnit
func (mr *mockRepairServiceMockRecorder) GetUnit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnit", reflect.TypeOf((*mockRepairService)(nil).GetUnit), arg0, arg1, arg2)
}

// ListUnits mocks base method
func (m *mockRepairService) ListUnits(arg0 context.Context, arg1 uuid.UUID, arg2 *repair.UnitFilter) ([]*repair.Unit, error) {
	ret := m.ctrl.Call(m, "ListUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*repair.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnits indicates an expected call of ListUnits
func (mr *mockRepairServiceMockRecorder) ListUnits(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnits", reflect.TypeOf((*mockRepairService)(nil).ListUnits), arg0, arg1, arg2)
}

// PutUnit mocks base method
func (m *mockRepairService) PutUnit(arg0 context.Context, arg1 *repair.Unit) error {
	ret := m.ctrl.Call(m, "PutUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUnit indicates an expected call of PutUnit
func (mr *mockRepairServiceMockRecorder) PutUnit(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUnit", reflect.TypeOf((*mockRepairService)(nil).PutUnit), arg0, arg1)
}
