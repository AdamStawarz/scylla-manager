// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scylladb/mermaid/restapi (interfaces: SchedService)

// Package restapi is a generated GoMock package.
package restapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sched "github.com/scylladb/mermaid/sched"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// mockSchedService is a mock of SchedService interface
type mockSchedService struct {
	ctrl     *gomock.Controller
	recorder *mockSchedServiceMockRecorder
}

// mockSchedServiceMockRecorder is the mock recorder for mockSchedService
type mockSchedServiceMockRecorder struct {
	mock *mockSchedService
}

// NewmockSchedService creates a new mock instance
func NewmockSchedService(ctrl *gomock.Controller) *mockSchedService {
	mock := &mockSchedService{ctrl: ctrl}
	mock.recorder = &mockSchedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockSchedService) EXPECT() *mockSchedServiceMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method
func (m *mockSchedService) DeleteTask(arg0 context.Context, arg1 *sched.Task) error {
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *mockSchedServiceMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*mockSchedService)(nil).DeleteTask), arg0, arg1)
}

// GetLastRun mocks base method
func (m *mockSchedService) GetLastRun(arg0 context.Context, arg1 *sched.Task, arg2 int) ([]*sched.Run, error) {
	ret := m.ctrl.Call(m, "GetLastRun", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*sched.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRun indicates an expected call of GetLastRun
func (mr *mockSchedServiceMockRecorder) GetLastRun(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRun", reflect.TypeOf((*mockSchedService)(nil).GetLastRun), arg0, arg1, arg2)
}

// GetTask mocks base method
func (m *mockSchedService) GetTask(arg0 context.Context, arg1 uuid.UUID, arg2 sched.TaskType, arg3 string) (*sched.Task, error) {
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*sched.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *mockSchedServiceMockRecorder) GetTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*mockSchedService)(nil).GetTask), arg0, arg1, arg2, arg3)
}

// ListTasks mocks base method
func (m *mockSchedService) ListTasks(arg0 context.Context, arg1 uuid.UUID, arg2 sched.TaskType) ([]*sched.Task, error) {
	ret := m.ctrl.Call(m, "ListTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*sched.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *mockSchedServiceMockRecorder) ListTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*mockSchedService)(nil).ListTasks), arg0, arg1, arg2)
}

// PutTask mocks base method
func (m *mockSchedService) PutTask(arg0 context.Context, arg1 *sched.Task) error {
	ret := m.ctrl.Call(m, "PutTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTask indicates an expected call of PutTask
func (mr *mockSchedServiceMockRecorder) PutTask(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTask", reflect.TypeOf((*mockSchedService)(nil).PutTask), arg0, arg1)
}

// StartTask mocks base method
func (m *mockSchedService) StartTask(arg0 context.Context, arg1 *sched.Task) error {
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTask indicates an expected call of StartTask
func (mr *mockSchedServiceMockRecorder) StartTask(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*mockSchedService)(nil).StartTask), arg0, arg1)
}

// StopTask mocks base method
func (m *mockSchedService) StopTask(arg0 context.Context, arg1 *sched.Task) error {
	ret := m.ctrl.Call(m, "StopTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTask indicates an expected call of StopTask
func (mr *mockSchedServiceMockRecorder) StopTask(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*mockSchedService)(nil).StopTask), arg0, arg1)
}
