// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scylladb/mermaid/restapi (interfaces: ClusterService)

// Package restapi is a generated GoMock package.
package restapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cluster "github.com/scylladb/mermaid/cluster"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// mockClusterService is a mock of ClusterService interface
type mockClusterService struct {
	ctrl     *gomock.Controller
	recorder *mockClusterServiceMockRecorder
}

// mockClusterServiceMockRecorder is the mock recorder for mockClusterService
type mockClusterServiceMockRecorder struct {
	mock *mockClusterService
}

// NewmockClusterService creates a new mock instance
func NewmockClusterService(ctrl *gomock.Controller) *mockClusterService {
	mock := &mockClusterService{ctrl: ctrl}
	mock.recorder = &mockClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockClusterService) EXPECT() *mockClusterServiceMockRecorder {
	return m.recorder
}

// DeleteCluster mocks base method
func (m *mockClusterService) DeleteCluster(arg0 context.Context, arg1 uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster
func (mr *mockClusterServiceMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*mockClusterService)(nil).DeleteCluster), arg0, arg1)
}

// GetCluster mocks base method
func (m *mockClusterService) GetCluster(arg0 context.Context, arg1 string) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *mockClusterServiceMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*mockClusterService)(nil).GetCluster), arg0, arg1)
}

// ListClusters mocks base method
func (m *mockClusterService) ListClusters(arg0 context.Context, arg1 *cluster.Filter) ([]*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "ListClusters", arg0, arg1)
	ret0, _ := ret[0].([]*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *mockClusterServiceMockRecorder) ListClusters(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*mockClusterService)(nil).ListClusters), arg0, arg1)
}

// PutCluster mocks base method
func (m *mockClusterService) PutCluster(arg0 context.Context, arg1 *cluster.Cluster) error {
	ret := m.ctrl.Call(m, "PutCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCluster indicates an expected call of PutCluster
func (mr *mockClusterServiceMockRecorder) PutCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCluster", reflect.TypeOf((*mockClusterService)(nil).PutCluster), arg0, arg1)
}
