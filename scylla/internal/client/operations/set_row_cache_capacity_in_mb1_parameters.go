// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetRowCacheCapacityInMb1Params creates a new SetRowCacheCapacityInMb1Params object
// with the default values initialized.
func NewSetRowCacheCapacityInMb1Params() *SetRowCacheCapacityInMb1Params {
	var ()
	return &SetRowCacheCapacityInMb1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetRowCacheCapacityInMb1ParamsWithTimeout creates a new SetRowCacheCapacityInMb1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetRowCacheCapacityInMb1ParamsWithTimeout(timeout time.Duration) *SetRowCacheCapacityInMb1Params {
	var ()
	return &SetRowCacheCapacityInMb1Params{

		timeout: timeout,
	}
}

// NewSetRowCacheCapacityInMb1ParamsWithContext creates a new SetRowCacheCapacityInMb1Params object
// with the default values initialized, and the ability to set a context for a request
func NewSetRowCacheCapacityInMb1ParamsWithContext(ctx context.Context) *SetRowCacheCapacityInMb1Params {
	var ()
	return &SetRowCacheCapacityInMb1Params{

		Context: ctx,
	}
}

// NewSetRowCacheCapacityInMb1ParamsWithHTTPClient creates a new SetRowCacheCapacityInMb1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetRowCacheCapacityInMb1ParamsWithHTTPClient(client *http.Client) *SetRowCacheCapacityInMb1Params {
	var ()
	return &SetRowCacheCapacityInMb1Params{
		HTTPClient: client,
	}
}

/*SetRowCacheCapacityInMb1Params contains all the parameters to send to the API endpoint
for the set row cache capacity in mb1 operation typically these are written to a http.Request
*/
type SetRowCacheCapacityInMb1Params struct {

	/*Capacity
	  row cache capacity in mb

	*/
	Capacity int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) WithTimeout(timeout time.Duration) *SetRowCacheCapacityInMb1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) WithContext(ctx context.Context) *SetRowCacheCapacityInMb1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) WithHTTPClient(client *http.Client) *SetRowCacheCapacityInMb1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapacity adds the capacity to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) WithCapacity(capacity int64) *SetRowCacheCapacityInMb1Params {
	o.SetCapacity(capacity)
	return o
}

// SetCapacity adds the capacity to the set row cache capacity in mb1 params
func (o *SetRowCacheCapacityInMb1Params) SetCapacity(capacity int64) {
	o.Capacity = capacity
}

// WriteToRequest writes these params to a swagger request
func (o *SetRowCacheCapacityInMb1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param capacity
	qrCapacity := o.Capacity
	qCapacity := swag.FormatInt64(qrCapacity)
	if qCapacity != "" {
		if err := r.SetQueryParam("capacity", qCapacity); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
