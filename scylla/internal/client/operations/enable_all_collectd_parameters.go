// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEnableAllCollectdParams creates a new EnableAllCollectdParams object
// with the default values initialized.
func NewEnableAllCollectdParams() *EnableAllCollectdParams {
	var ()
	return &EnableAllCollectdParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnableAllCollectdParamsWithTimeout creates a new EnableAllCollectdParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnableAllCollectdParamsWithTimeout(timeout time.Duration) *EnableAllCollectdParams {
	var ()
	return &EnableAllCollectdParams{

		timeout: timeout,
	}
}

// NewEnableAllCollectdParamsWithContext creates a new EnableAllCollectdParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnableAllCollectdParamsWithContext(ctx context.Context) *EnableAllCollectdParams {
	var ()
	return &EnableAllCollectdParams{

		Context: ctx,
	}
}

// NewEnableAllCollectdParamsWithHTTPClient creates a new EnableAllCollectdParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnableAllCollectdParamsWithHTTPClient(client *http.Client) *EnableAllCollectdParams {
	var ()
	return &EnableAllCollectdParams{
		HTTPClient: client,
	}
}

/*EnableAllCollectdParams contains all the parameters to send to the API endpoint
for the enable all collectd operation typically these are written to a http.Request
*/
type EnableAllCollectdParams struct {

	/*Enable
	  set to true to enable all, anything else or omit to disable

	*/
	Enable *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enable all collectd params
func (o *EnableAllCollectdParams) WithTimeout(timeout time.Duration) *EnableAllCollectdParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enable all collectd params
func (o *EnableAllCollectdParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enable all collectd params
func (o *EnableAllCollectdParams) WithContext(ctx context.Context) *EnableAllCollectdParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enable all collectd params
func (o *EnableAllCollectdParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enable all collectd params
func (o *EnableAllCollectdParams) WithHTTPClient(client *http.Client) *EnableAllCollectdParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enable all collectd params
func (o *EnableAllCollectdParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the enable all collectd params
func (o *EnableAllCollectdParams) WithEnable(enable *bool) *EnableAllCollectdParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the enable all collectd params
func (o *EnableAllCollectdParams) SetEnable(enable *bool) {
	o.Enable = enable
}

// WriteToRequest writes these params to a swagger request
func (o *EnableAllCollectdParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enable != nil {

		// query param enable
		var qrEnable bool
		if o.Enable != nil {
			qrEnable = *o.Enable
		}
		qEnable := swag.FormatBool(qrEnable)
		if qEnable != "" {
			if err := r.SetQueryParam("enable", qEnable); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
