// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetRPCTimeoutParams creates a new SetRPCTimeoutParams object
// with the default values initialized.
func NewSetRPCTimeoutParams() *SetRPCTimeoutParams {
	var ()
	return &SetRPCTimeoutParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewSetRPCTimeoutParamsWithTimeout creates a new SetRPCTimeoutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetRPCTimeoutParamsWithTimeout(timeout time.Duration) *SetRPCTimeoutParams {
	var ()
	return &SetRPCTimeoutParams{

		requestTimeout: timeout,
	}
}

// NewSetRPCTimeoutParamsWithContext creates a new SetRPCTimeoutParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetRPCTimeoutParamsWithContext(ctx context.Context) *SetRPCTimeoutParams {
	var ()
	return &SetRPCTimeoutParams{

		Context: ctx,
	}
}

// NewSetRPCTimeoutParamsWithHTTPClient creates a new SetRPCTimeoutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetRPCTimeoutParamsWithHTTPClient(client *http.Client) *SetRPCTimeoutParams {
	var ()
	return &SetRPCTimeoutParams{
		HTTPClient: client,
	}
}

/*SetRPCTimeoutParams contains all the parameters to send to the API endpoint
for the set rpc timeout operation typically these are written to a http.Request
*/
type SetRPCTimeoutParams struct {

	/*Timeout
	  Timeout in seconds

	*/
	Timeout int32

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the set rpc timeout params
func (o *SetRPCTimeoutParams) WithRequestTimeout(timeout time.Duration) *SetRPCTimeoutParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the set rpc timeout params
func (o *SetRPCTimeoutParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the set rpc timeout params
func (o *SetRPCTimeoutParams) WithContext(ctx context.Context) *SetRPCTimeoutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set rpc timeout params
func (o *SetRPCTimeoutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set rpc timeout params
func (o *SetRPCTimeoutParams) WithHTTPClient(client *http.Client) *SetRPCTimeoutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set rpc timeout params
func (o *SetRPCTimeoutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTimeout adds the timeout to the set rpc timeout params
func (o *SetRPCTimeoutParams) WithTimeout(timeout int32) *SetRPCTimeoutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set rpc timeout params
func (o *SetRPCTimeoutParams) SetTimeout(timeout int32) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *SetRPCTimeoutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// query param timeout
	qrTimeout := o.Timeout
	qTimeout := swag.FormatInt32(qrTimeout)
	if qTimeout != "" {
		if err := r.SetQueryParam("timeout", qTimeout); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
