// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateSnitchParams creates a new UpdateSnitchParams object
// with the default values initialized.
func NewUpdateSnitchParams() *UpdateSnitchParams {
	var ()
	return &UpdateSnitchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSnitchParamsWithTimeout creates a new UpdateSnitchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSnitchParamsWithTimeout(timeout time.Duration) *UpdateSnitchParams {
	var ()
	return &UpdateSnitchParams{

		timeout: timeout,
	}
}

// NewUpdateSnitchParamsWithContext creates a new UpdateSnitchParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSnitchParamsWithContext(ctx context.Context) *UpdateSnitchParams {
	var ()
	return &UpdateSnitchParams{

		Context: ctx,
	}
}

// NewUpdateSnitchParamsWithHTTPClient creates a new UpdateSnitchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSnitchParamsWithHTTPClient(client *http.Client) *UpdateSnitchParams {
	var ()
	return &UpdateSnitchParams{
		HTTPClient: client,
	}
}

/*UpdateSnitchParams contains all the parameters to send to the API endpoint
for the update snitch operation typically these are written to a http.Request
*/
type UpdateSnitchParams struct {

	/*Dynamic
	  When true dynamicsnitch is used

	*/
	Dynamic bool
	/*DynamicBadnessThreshold
	  Dynamic badness threshold, (default 0.0)

	*/
	DynamicBadnessThreshold *int32
	/*DynamicResetInterval
	  integer, in ms (default 600,000)

	*/
	DynamicResetInterval *int32
	/*DynamicUpdateInterval
	  integer, in ms (default 100)

	*/
	DynamicUpdateInterval *int32
	/*EpSnitchClassName
	  The canonical path name for a class implementing IEndpointSnitch

	*/
	EpSnitchClassName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update snitch params
func (o *UpdateSnitchParams) WithTimeout(timeout time.Duration) *UpdateSnitchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update snitch params
func (o *UpdateSnitchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update snitch params
func (o *UpdateSnitchParams) WithContext(ctx context.Context) *UpdateSnitchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update snitch params
func (o *UpdateSnitchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update snitch params
func (o *UpdateSnitchParams) WithHTTPClient(client *http.Client) *UpdateSnitchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update snitch params
func (o *UpdateSnitchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDynamic adds the dynamic to the update snitch params
func (o *UpdateSnitchParams) WithDynamic(dynamic bool) *UpdateSnitchParams {
	o.SetDynamic(dynamic)
	return o
}

// SetDynamic adds the dynamic to the update snitch params
func (o *UpdateSnitchParams) SetDynamic(dynamic bool) {
	o.Dynamic = dynamic
}

// WithDynamicBadnessThreshold adds the dynamicBadnessThreshold to the update snitch params
func (o *UpdateSnitchParams) WithDynamicBadnessThreshold(dynamicBadnessThreshold *int32) *UpdateSnitchParams {
	o.SetDynamicBadnessThreshold(dynamicBadnessThreshold)
	return o
}

// SetDynamicBadnessThreshold adds the dynamicBadnessThreshold to the update snitch params
func (o *UpdateSnitchParams) SetDynamicBadnessThreshold(dynamicBadnessThreshold *int32) {
	o.DynamicBadnessThreshold = dynamicBadnessThreshold
}

// WithDynamicResetInterval adds the dynamicResetInterval to the update snitch params
func (o *UpdateSnitchParams) WithDynamicResetInterval(dynamicResetInterval *int32) *UpdateSnitchParams {
	o.SetDynamicResetInterval(dynamicResetInterval)
	return o
}

// SetDynamicResetInterval adds the dynamicResetInterval to the update snitch params
func (o *UpdateSnitchParams) SetDynamicResetInterval(dynamicResetInterval *int32) {
	o.DynamicResetInterval = dynamicResetInterval
}

// WithDynamicUpdateInterval adds the dynamicUpdateInterval to the update snitch params
func (o *UpdateSnitchParams) WithDynamicUpdateInterval(dynamicUpdateInterval *int32) *UpdateSnitchParams {
	o.SetDynamicUpdateInterval(dynamicUpdateInterval)
	return o
}

// SetDynamicUpdateInterval adds the dynamicUpdateInterval to the update snitch params
func (o *UpdateSnitchParams) SetDynamicUpdateInterval(dynamicUpdateInterval *int32) {
	o.DynamicUpdateInterval = dynamicUpdateInterval
}

// WithEpSnitchClassName adds the epSnitchClassName to the update snitch params
func (o *UpdateSnitchParams) WithEpSnitchClassName(epSnitchClassName string) *UpdateSnitchParams {
	o.SetEpSnitchClassName(epSnitchClassName)
	return o
}

// SetEpSnitchClassName adds the epSnitchClassName to the update snitch params
func (o *UpdateSnitchParams) SetEpSnitchClassName(epSnitchClassName string) {
	o.EpSnitchClassName = epSnitchClassName
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSnitchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dynamic
	qrDynamic := o.Dynamic
	qDynamic := swag.FormatBool(qrDynamic)
	if qDynamic != "" {
		if err := r.SetQueryParam("dynamic", qDynamic); err != nil {
			return err
		}
	}

	if o.DynamicBadnessThreshold != nil {

		// query param dynamic_badness_threshold
		var qrDynamicBadnessThreshold int32
		if o.DynamicBadnessThreshold != nil {
			qrDynamicBadnessThreshold = *o.DynamicBadnessThreshold
		}
		qDynamicBadnessThreshold := swag.FormatInt32(qrDynamicBadnessThreshold)
		if qDynamicBadnessThreshold != "" {
			if err := r.SetQueryParam("dynamic_badness_threshold", qDynamicBadnessThreshold); err != nil {
				return err
			}
		}

	}

	if o.DynamicResetInterval != nil {

		// query param dynamic_reset_interval
		var qrDynamicResetInterval int32
		if o.DynamicResetInterval != nil {
			qrDynamicResetInterval = *o.DynamicResetInterval
		}
		qDynamicResetInterval := swag.FormatInt32(qrDynamicResetInterval)
		if qDynamicResetInterval != "" {
			if err := r.SetQueryParam("dynamic_reset_interval", qDynamicResetInterval); err != nil {
				return err
			}
		}

	}

	if o.DynamicUpdateInterval != nil {

		// query param dynamic_update_interval
		var qrDynamicUpdateInterval int32
		if o.DynamicUpdateInterval != nil {
			qrDynamicUpdateInterval = *o.DynamicUpdateInterval
		}
		qDynamicUpdateInterval := swag.FormatInt32(qrDynamicUpdateInterval)
		if qDynamicUpdateInterval != "" {
			if err := r.SetQueryParam("dynamic_update_interval", qDynamicUpdateInterval); err != nil {
				return err
			}
		}

	}

	// query param ep_snitch_class_name
	qrEpSnitchClassName := o.EpSnitchClassName
	qEpSnitchClassName := qrEpSnitchClassName
	if qEpSnitchClassName != "" {
		if err := r.SetQueryParam("ep_snitch_class_name", qEpSnitchClassName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
