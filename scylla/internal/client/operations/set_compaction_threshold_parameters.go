// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetCompactionThresholdParams creates a new SetCompactionThresholdParams object
// with the default values initialized.
func NewSetCompactionThresholdParams() *SetCompactionThresholdParams {
	var ()
	return &SetCompactionThresholdParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetCompactionThresholdParamsWithTimeout creates a new SetCompactionThresholdParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetCompactionThresholdParamsWithTimeout(timeout time.Duration) *SetCompactionThresholdParams {
	var ()
	return &SetCompactionThresholdParams{

		timeout: timeout,
	}
}

// NewSetCompactionThresholdParamsWithContext creates a new SetCompactionThresholdParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetCompactionThresholdParamsWithContext(ctx context.Context) *SetCompactionThresholdParams {
	var ()
	return &SetCompactionThresholdParams{

		Context: ctx,
	}
}

// NewSetCompactionThresholdParamsWithHTTPClient creates a new SetCompactionThresholdParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetCompactionThresholdParamsWithHTTPClient(client *http.Client) *SetCompactionThresholdParams {
	var ()
	return &SetCompactionThresholdParams{
		HTTPClient: client,
	}
}

/*SetCompactionThresholdParams contains all the parameters to send to the API endpoint
for the set compaction threshold operation typically these are written to a http.Request
*/
type SetCompactionThresholdParams struct {

	/*Maximum
	  The maximum number of sstables in queue before compaction kicks off

	*/
	Maximum int32
	/*Minimum
	  The minimum number of sstables in queue before compaction kicks off

	*/
	Minimum int32
	/*Name
	  The column family name in keyspace:name format

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithTimeout(timeout time.Duration) *SetCompactionThresholdParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithContext(ctx context.Context) *SetCompactionThresholdParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithHTTPClient(client *http.Client) *SetCompactionThresholdParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaximum adds the maximum to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithMaximum(maximum int32) *SetCompactionThresholdParams {
	o.SetMaximum(maximum)
	return o
}

// SetMaximum adds the maximum to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetMaximum(maximum int32) {
	o.Maximum = maximum
}

// WithMinimum adds the minimum to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithMinimum(minimum int32) *SetCompactionThresholdParams {
	o.SetMinimum(minimum)
	return o
}

// SetMinimum adds the minimum to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetMinimum(minimum int32) {
	o.Minimum = minimum
}

// WithName adds the name to the set compaction threshold params
func (o *SetCompactionThresholdParams) WithName(name string) *SetCompactionThresholdParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the set compaction threshold params
func (o *SetCompactionThresholdParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *SetCompactionThresholdParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param maximum
	qrMaximum := o.Maximum
	qMaximum := swag.FormatInt32(qrMaximum)
	if qMaximum != "" {
		if err := r.SetQueryParam("maximum", qMaximum); err != nil {
			return err
		}
	}

	// query param minimum
	qrMinimum := o.Minimum
	qMinimum := swag.FormatInt32(qrMinimum)
	if qMinimum != "" {
		if err := r.SetQueryParam("minimum", qMinimum); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
