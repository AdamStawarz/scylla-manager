// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEnableCollectdParams creates a new EnableCollectdParams object
// with the default values initialized.
func NewEnableCollectdParams() *EnableCollectdParams {
	var ()
	return &EnableCollectdParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnableCollectdParamsWithTimeout creates a new EnableCollectdParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnableCollectdParamsWithTimeout(timeout time.Duration) *EnableCollectdParams {
	var ()
	return &EnableCollectdParams{

		timeout: timeout,
	}
}

// NewEnableCollectdParamsWithContext creates a new EnableCollectdParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnableCollectdParamsWithContext(ctx context.Context) *EnableCollectdParams {
	var ()
	return &EnableCollectdParams{

		Context: ctx,
	}
}

// NewEnableCollectdParamsWithHTTPClient creates a new EnableCollectdParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnableCollectdParamsWithHTTPClient(client *http.Client) *EnableCollectdParams {
	var ()
	return &EnableCollectdParams{
		HTTPClient: client,
	}
}

/*EnableCollectdParams contains all the parameters to send to the API endpoint
for the enable collectd operation typically these are written to a http.Request
*/
type EnableCollectdParams struct {

	/*Enable
	  set to true to enable all, anything else or omit to disable

	*/
	Enable *bool
	/*Instance
	  The plugin instance typically #CPU indicating per CPU metric. Regex are supported. Omit for all

	*/
	Instance *string
	/*Pluginid
	  The plugin ID, describe the component the metric belongs to. Examples are cache, thrift, etc'. Regex are supported.The plugin ID, describe the component the metric belong to. Examples are: cache, thrift etc'. regex are supported

	*/
	Pluginid string
	/*Type
	  The plugin type, the type of the information. Examples are total_operations, bytes, total_operations, etc'. Regex are supported. Omit for all

	*/
	Type *string
	/*TypeInstance
	  The plugin type instance, the specific metric. Exampls are total_writes, total_size, zones, etc'. Regex are supported, Omit for all

	*/
	TypeInstance *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enable collectd params
func (o *EnableCollectdParams) WithTimeout(timeout time.Duration) *EnableCollectdParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enable collectd params
func (o *EnableCollectdParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enable collectd params
func (o *EnableCollectdParams) WithContext(ctx context.Context) *EnableCollectdParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enable collectd params
func (o *EnableCollectdParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enable collectd params
func (o *EnableCollectdParams) WithHTTPClient(client *http.Client) *EnableCollectdParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enable collectd params
func (o *EnableCollectdParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the enable collectd params
func (o *EnableCollectdParams) WithEnable(enable *bool) *EnableCollectdParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the enable collectd params
func (o *EnableCollectdParams) SetEnable(enable *bool) {
	o.Enable = enable
}

// WithInstance adds the instance to the enable collectd params
func (o *EnableCollectdParams) WithInstance(instance *string) *EnableCollectdParams {
	o.SetInstance(instance)
	return o
}

// SetInstance adds the instance to the enable collectd params
func (o *EnableCollectdParams) SetInstance(instance *string) {
	o.Instance = instance
}

// WithPluginid adds the pluginid to the enable collectd params
func (o *EnableCollectdParams) WithPluginid(pluginid string) *EnableCollectdParams {
	o.SetPluginid(pluginid)
	return o
}

// SetPluginid adds the pluginid to the enable collectd params
func (o *EnableCollectdParams) SetPluginid(pluginid string) {
	o.Pluginid = pluginid
}

// WithType adds the typeVar to the enable collectd params
func (o *EnableCollectdParams) WithType(typeVar *string) *EnableCollectdParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the enable collectd params
func (o *EnableCollectdParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithTypeInstance adds the typeInstance to the enable collectd params
func (o *EnableCollectdParams) WithTypeInstance(typeInstance *string) *EnableCollectdParams {
	o.SetTypeInstance(typeInstance)
	return o
}

// SetTypeInstance adds the typeInstance to the enable collectd params
func (o *EnableCollectdParams) SetTypeInstance(typeInstance *string) {
	o.TypeInstance = typeInstance
}

// WriteToRequest writes these params to a swagger request
func (o *EnableCollectdParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enable != nil {

		// query param enable
		var qrEnable bool
		if o.Enable != nil {
			qrEnable = *o.Enable
		}
		qEnable := swag.FormatBool(qrEnable)
		if qEnable != "" {
			if err := r.SetQueryParam("enable", qEnable); err != nil {
				return err
			}
		}

	}

	if o.Instance != nil {

		// query param instance
		var qrInstance string
		if o.Instance != nil {
			qrInstance = *o.Instance
		}
		qInstance := qrInstance
		if qInstance != "" {
			if err := r.SetQueryParam("instance", qInstance); err != nil {
				return err
			}
		}

	}

	// path param pluginid
	if err := r.SetPathParam("pluginid", o.Pluginid); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.TypeInstance != nil {

		// query param type_instance
		var qrTypeInstance string
		if o.TypeInstance != nil {
			qrTypeInstance = *o.TypeInstance
		}
		qTypeInstance := qrTypeInstance
		if qTypeInstance != "" {
			if err := r.SetQueryParam("type_instance", qTypeInstance); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
