// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetSlowQueryParams creates a new SetSlowQueryParams object
// with the default values initialized.
func NewSetSlowQueryParams() *SetSlowQueryParams {
	var ()
	return &SetSlowQueryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetSlowQueryParamsWithTimeout creates a new SetSlowQueryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetSlowQueryParamsWithTimeout(timeout time.Duration) *SetSlowQueryParams {
	var ()
	return &SetSlowQueryParams{

		timeout: timeout,
	}
}

// NewSetSlowQueryParamsWithContext creates a new SetSlowQueryParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetSlowQueryParamsWithContext(ctx context.Context) *SetSlowQueryParams {
	var ()
	return &SetSlowQueryParams{

		Context: ctx,
	}
}

// NewSetSlowQueryParamsWithHTTPClient creates a new SetSlowQueryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetSlowQueryParamsWithHTTPClient(client *http.Client) *SetSlowQueryParams {
	var ()
	return &SetSlowQueryParams{
		HTTPClient: client,
	}
}

/*SetSlowQueryParams contains all the parameters to send to the API endpoint
for the set slow query operation typically these are written to a http.Request
*/
type SetSlowQueryParams struct {

	/*Enable
	  set it to true to enable, anything else to disable

	*/
	Enable *bool
	/*Threshold
	  Slow query record threshold in microseconds

	*/
	Threshold *int64
	/*TTL
	  TTL in seconds

	*/
	TTL *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set slow query params
func (o *SetSlowQueryParams) WithTimeout(timeout time.Duration) *SetSlowQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set slow query params
func (o *SetSlowQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set slow query params
func (o *SetSlowQueryParams) WithContext(ctx context.Context) *SetSlowQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set slow query params
func (o *SetSlowQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set slow query params
func (o *SetSlowQueryParams) WithHTTPClient(client *http.Client) *SetSlowQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set slow query params
func (o *SetSlowQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the set slow query params
func (o *SetSlowQueryParams) WithEnable(enable *bool) *SetSlowQueryParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the set slow query params
func (o *SetSlowQueryParams) SetEnable(enable *bool) {
	o.Enable = enable
}

// WithThreshold adds the threshold to the set slow query params
func (o *SetSlowQueryParams) WithThreshold(threshold *int64) *SetSlowQueryParams {
	o.SetThreshold(threshold)
	return o
}

// SetThreshold adds the threshold to the set slow query params
func (o *SetSlowQueryParams) SetThreshold(threshold *int64) {
	o.Threshold = threshold
}

// WithTTL adds the ttl to the set slow query params
func (o *SetSlowQueryParams) WithTTL(ttl *int64) *SetSlowQueryParams {
	o.SetTTL(ttl)
	return o
}

// SetTTL adds the ttl to the set slow query params
func (o *SetSlowQueryParams) SetTTL(ttl *int64) {
	o.TTL = ttl
}

// WriteToRequest writes these params to a swagger request
func (o *SetSlowQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enable != nil {

		// query param enable
		var qrEnable bool
		if o.Enable != nil {
			qrEnable = *o.Enable
		}
		qEnable := swag.FormatBool(qrEnable)
		if qEnable != "" {
			if err := r.SetQueryParam("enable", qEnable); err != nil {
				return err
			}
		}

	}

	if o.Threshold != nil {

		// query param threshold
		var qrThreshold int64
		if o.Threshold != nil {
			qrThreshold = *o.Threshold
		}
		qThreshold := swag.FormatInt64(qrThreshold)
		if qThreshold != "" {
			if err := r.SetQueryParam("threshold", qThreshold); err != nil {
				return err
			}
		}

	}

	if o.TTL != nil {

		// query param ttl
		var qrTTL int64
		if o.TTL != nil {
			qrTTL = *o.TTL
		}
		qTTL := swag.FormatInt64(qrTTL)
		if qTTL != "" {
			if err := r.SetQueryParam("ttl", qTTL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
