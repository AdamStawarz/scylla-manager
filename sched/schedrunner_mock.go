// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package sched is a generated GoMock package.
package sched

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	runner "github.com/scylladb/mermaid/sched/runner"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// mockRunner is a mock of Runner interface
type mockRunner struct {
	ctrl     *gomock.Controller
	recorder *mockRunnerMockRecorder
}

// mockRunnerMockRecorder is the mock recorder for mockRunner
type mockRunnerMockRecorder struct {
	mock *mockRunner
}

// NewmockRunner creates a new mock instance
func NewmockRunner(ctrl *gomock.Controller) *mockRunner {
	mock := &mockRunner{ctrl: ctrl}
	mock.recorder = &mockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockRunner) EXPECT() *mockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *mockRunner) Run(ctx context.Context, clusterID, runID uuid.UUID, props runner.TaskProperties) error {
	ret := m.ctrl.Call(m, "Run", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *mockRunnerMockRecorder) Run(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*mockRunner)(nil).Run), ctx, clusterID, runID, props)
}

// Stop mocks base method
func (m *mockRunner) Stop(ctx context.Context, clusterID, runID uuid.UUID, props runner.TaskProperties) error {
	ret := m.ctrl.Call(m, "Stop", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *mockRunnerMockRecorder) Stop(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*mockRunner)(nil).Stop), ctx, clusterID, runID, props)
}

// Status mocks base method
func (m *mockRunner) Status(ctx context.Context, clusterID, runID uuid.UUID, props runner.TaskProperties) (runner.Status, string, error) {
	ret := m.ctrl.Call(m, "Status", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(runner.Status)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status
func (mr *mockRunnerMockRecorder) Status(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*mockRunner)(nil).Status), ctx, clusterID, runID, props)
}
