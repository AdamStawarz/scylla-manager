// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scylladb/mermaid/sched/runner (interfaces: Runner)

// Package sched is a generated GoMock package.
package sched

import (
	context "context"
	json "encoding/json"
	gomock "github.com/golang/mock/gomock"
	runner "github.com/scylladb/mermaid/sched/runner"
	reflect "reflect"
)

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRunner) Run(arg0 context.Context, arg1 runner.Descriptor, arg2 json.RawMessage) error {
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunnerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), arg0, arg1, arg2)
}

// Status mocks base method
func (m *MockRunner) Status(arg0 context.Context, arg1 runner.Descriptor) (runner.Status, string, error) {
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(runner.Status)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status
func (mr *MockRunnerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRunner)(nil).Status), arg0, arg1)
}

// Stop mocks base method
func (m *MockRunner) Stop(arg0 context.Context, arg1 runner.Descriptor) error {
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRunnerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRunner)(nil).Stop), arg0, arg1)
}
