// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListOptions list options
// swagger:model ListOptions
type ListOptions struct {

	// A remote name string eg. drive:
	// Required: true
	Fs *string `json:"fs"`

	// opt
	Opt *ListOptionsOpt `json:"opt,omitempty"`

	// A path within that remote eg. dir
	// Required: true
	Remote *string `json:"remote"`
}

// Validate validates this list options
func (m *ListOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOptions) validateFs(formats strfmt.Registry) error {

	if err := validate.Required("fs", "body", m.Fs); err != nil {
		return err
	}

	return nil
}

func (m *ListOptions) validateOpt(formats strfmt.Registry) error {

	if swag.IsZero(m.Opt) { // not required
		return nil
	}

	if m.Opt != nil {
		if err := m.Opt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opt")
			}
			return err
		}
	}

	return nil
}

func (m *ListOptions) validateRemote(formats strfmt.Registry) error {

	if err := validate.Required("remote", "body", m.Remote); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOptions) UnmarshalBinary(b []byte) error {
	var res ListOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListOptionsOpt A path within that remote eg. dir
// swagger:model ListOptionsOpt
type ListOptionsOpt struct {

	// If set return modification time
	NoModTime bool `json:"noModTime,omitempty"`

	// If set recurse directories
	Recurse bool `json:"recurse,omitempty"`

	// If set show decrypted names
	ShowEncrypted bool `json:"showEncrypted,omitempty"`

	// If set return a dictionary of hashes
	ShowHash bool `json:"showHash,omitempty"`

	// If set show the IDs for each item if known
	ShowOrigIds bool `json:"showOrigIDs,omitempty"`
}

// Validate validates this list options opt
func (m *ListOptionsOpt) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListOptionsOpt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOptionsOpt) UnmarshalBinary(b []byte) error {
	var res ListOptionsOpt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
