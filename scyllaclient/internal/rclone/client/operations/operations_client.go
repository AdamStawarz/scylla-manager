// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConfigCreate creates new remote

Create configuration entry for the remote
*/
func (a *Client) ConfigCreate(params *ConfigCreateParams) (*ConfigCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigCreate",
		Method:             "POST",
		PathPattern:        "/config/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigCreateOK), nil

}

/*
CoreBwlimit sets the bandwidth limit

This sets the bandwidth limit to that passed in
*/
func (a *Client) CoreBwlimit(params *CoreBwlimitParams) (*CoreBwlimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreBwlimitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CoreBwlimit",
		Method:             "POST",
		PathPattern:        "/core/bwlimit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreBwlimitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CoreBwlimitOK), nil

}

/*
CoreGroupList groups names

Returns list of group names
*/
func (a *Client) CoreGroupList(params *CoreGroupListParams) (*CoreGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CoreGroupList",
		Method:             "POST",
		PathPattern:        "/core/group-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreGroupListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CoreGroupListOK), nil

}

/*
CoreStats stats about transfers

Returns stats about current transfers
*/
func (a *Client) CoreStats(params *CoreStatsParams) (*CoreStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CoreStats",
		Method:             "POST",
		PathPattern:        "/core/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CoreStatsOK), nil

}

/*
CoreStatsReset resets all or specific stats group

Resets stats
*/
func (a *Client) CoreStatsReset(params *CoreStatsResetParams) (*CoreStatsResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreStatsResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CoreStatsReset",
		Method:             "POST",
		PathPattern:        "/core/stats-reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreStatsResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CoreStatsResetOK), nil

}

/*
CoreTransferred completeds transfers

Returns stats about completed transfers
*/
func (a *Client) CoreTransferred(params *CoreTransferredParams) (*CoreTransferredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreTransferredParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CoreTransferred",
		Method:             "POST",
		PathPattern:        "/core/transferred",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreTransferredReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CoreTransferredOK), nil

}

/*
JobStatus jobs status

Reads the status of the job ID
*/
func (a *Client) JobStatus(params *JobStatusParams) (*JobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobStatus",
		Method:             "POST",
		PathPattern:        "/job/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobStatusOK), nil

}

/*
JobStop stops async job

Stops job with provided ID
*/
func (a *Client) JobStop(params *JobStopParams) (*JobStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobStop",
		Method:             "POST",
		PathPattern:        "/job/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobStopOK), nil

}

/*
OperationsAbout abouts remote

Get usage information from the remote
*/
func (a *Client) OperationsAbout(params *OperationsAboutParams) (*OperationsAboutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationsAboutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperationsAbout",
		Method:             "POST",
		PathPattern:        "/operations/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OperationsAboutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationsAboutOK), nil

}

/*
OperationsCopyfile copies a file

Copy a file from source remote to destination remote
*/
func (a *Client) OperationsCopyfile(params *OperationsCopyfileParams) (*OperationsCopyfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationsCopyfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperationsCopyfile",
		Method:             "POST",
		PathPattern:        "/operations/copyfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OperationsCopyfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationsCopyfileOK), nil

}

/*
OperationsDeletefile deletes file

Remove the single file pointed to
*/
func (a *Client) OperationsDeletefile(params *OperationsDeletefileParams) (*OperationsDeletefileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationsDeletefileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperationsDeletefile",
		Method:             "POST",
		PathPattern:        "/operations/deletefile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OperationsDeletefileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationsDeletefileOK), nil

}

/*
OperationsList lists remote

List the given remote and path
*/
func (a *Client) OperationsList(params *OperationsListParams) (*OperationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperationsList",
		Method:             "POST",
		PathPattern:        "/operations/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OperationsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationsListOK), nil

}

/*
OperationsPurge purges container

Remove a directory or container and all of its contents
*/
func (a *Client) OperationsPurge(params *OperationsPurgeParams) (*OperationsPurgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperationsPurgeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperationsPurge",
		Method:             "POST",
		PathPattern:        "/operations/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OperationsPurgeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*OperationsPurgeOK), nil

}

/*
SyncCopy copies directory

Copy a directory from source remote to destination remote
*/
func (a *Client) SyncCopy(params *SyncCopyParams) (*SyncCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SyncCopy",
		Method:             "POST",
		PathPattern:        "/sync/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncCopyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SyncCopyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
