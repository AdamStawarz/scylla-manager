// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetPhiConvictThresholdParams creates a new SetPhiConvictThresholdParams object
// with the default values initialized.
func NewSetPhiConvictThresholdParams() *SetPhiConvictThresholdParams {
	var ()
	return &SetPhiConvictThresholdParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetPhiConvictThresholdParamsWithTimeout creates a new SetPhiConvictThresholdParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetPhiConvictThresholdParamsWithTimeout(timeout time.Duration) *SetPhiConvictThresholdParams {
	var ()
	return &SetPhiConvictThresholdParams{

		timeout: timeout,
	}
}

// NewSetPhiConvictThresholdParamsWithContext creates a new SetPhiConvictThresholdParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetPhiConvictThresholdParamsWithContext(ctx context.Context) *SetPhiConvictThresholdParams {
	var ()
	return &SetPhiConvictThresholdParams{

		Context: ctx,
	}
}

// NewSetPhiConvictThresholdParamsWithHTTPClient creates a new SetPhiConvictThresholdParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetPhiConvictThresholdParamsWithHTTPClient(client *http.Client) *SetPhiConvictThresholdParams {
	var ()
	return &SetPhiConvictThresholdParams{
		HTTPClient: client,
	}
}

/*SetPhiConvictThresholdParams contains all the parameters to send to the API endpoint
for the set phi convict threshold operation typically these are written to a http.Request
*/
type SetPhiConvictThresholdParams struct {

	/*Phi
	  The new phi value

	*/
	Phi int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) WithTimeout(timeout time.Duration) *SetPhiConvictThresholdParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) WithContext(ctx context.Context) *SetPhiConvictThresholdParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) WithHTTPClient(client *http.Client) *SetPhiConvictThresholdParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPhi adds the phi to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) WithPhi(phi int32) *SetPhiConvictThresholdParams {
	o.SetPhi(phi)
	return o
}

// SetPhi adds the phi to the set phi convict threshold params
func (o *SetPhiConvictThresholdParams) SetPhi(phi int32) {
	o.Phi = phi
}

// WriteToRequest writes these params to a swagger request
func (o *SetPhiConvictThresholdParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param phi
	qrPhi := o.Phi
	qPhi := swag.FormatInt32(qrPhi)
	if qPhi != "" {
		if err := r.SetQueryParam("phi", qPhi); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
