// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewScrubParams creates a new ScrubParams object
// with the default values initialized.
func NewScrubParams() *ScrubParams {
	var ()
	return &ScrubParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewScrubParamsWithTimeout creates a new ScrubParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewScrubParamsWithTimeout(timeout time.Duration) *ScrubParams {
	var ()
	return &ScrubParams{

		timeout: timeout,
	}
}

// NewScrubParamsWithContext creates a new ScrubParams object
// with the default values initialized, and the ability to set a context for a request
func NewScrubParamsWithContext(ctx context.Context) *ScrubParams {
	var ()
	return &ScrubParams{

		Context: ctx,
	}
}

// NewScrubParamsWithHTTPClient creates a new ScrubParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewScrubParamsWithHTTPClient(client *http.Client) *ScrubParams {
	var ()
	return &ScrubParams{
		HTTPClient: client,
	}
}

/*ScrubParams contains all the parameters to send to the API endpoint
for the scrub operation typically these are written to a http.Request
*/
type ScrubParams struct {

	/*Cf
	  Comma seperated column family names

	*/
	Cf *string
	/*DisableSnapshot
	  When set to true, disable snapshot

	*/
	DisableSnapshot *bool
	/*Keyspace
	  The keyspace to query about

	*/
	Keyspace string
	/*SkipCorrupted
	  When set to true, skip corrupted

	*/
	SkipCorrupted *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the scrub params
func (o *ScrubParams) WithTimeout(timeout time.Duration) *ScrubParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scrub params
func (o *ScrubParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scrub params
func (o *ScrubParams) WithContext(ctx context.Context) *ScrubParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scrub params
func (o *ScrubParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scrub params
func (o *ScrubParams) WithHTTPClient(client *http.Client) *ScrubParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scrub params
func (o *ScrubParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCf adds the cf to the scrub params
func (o *ScrubParams) WithCf(cf *string) *ScrubParams {
	o.SetCf(cf)
	return o
}

// SetCf adds the cf to the scrub params
func (o *ScrubParams) SetCf(cf *string) {
	o.Cf = cf
}

// WithDisableSnapshot adds the disableSnapshot to the scrub params
func (o *ScrubParams) WithDisableSnapshot(disableSnapshot *bool) *ScrubParams {
	o.SetDisableSnapshot(disableSnapshot)
	return o
}

// SetDisableSnapshot adds the disableSnapshot to the scrub params
func (o *ScrubParams) SetDisableSnapshot(disableSnapshot *bool) {
	o.DisableSnapshot = disableSnapshot
}

// WithKeyspace adds the keyspace to the scrub params
func (o *ScrubParams) WithKeyspace(keyspace string) *ScrubParams {
	o.SetKeyspace(keyspace)
	return o
}

// SetKeyspace adds the keyspace to the scrub params
func (o *ScrubParams) SetKeyspace(keyspace string) {
	o.Keyspace = keyspace
}

// WithSkipCorrupted adds the skipCorrupted to the scrub params
func (o *ScrubParams) WithSkipCorrupted(skipCorrupted *bool) *ScrubParams {
	o.SetSkipCorrupted(skipCorrupted)
	return o
}

// SetSkipCorrupted adds the skipCorrupted to the scrub params
func (o *ScrubParams) SetSkipCorrupted(skipCorrupted *bool) {
	o.SkipCorrupted = skipCorrupted
}

// WriteToRequest writes these params to a swagger request
func (o *ScrubParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cf != nil {

		// query param cf
		var qrCf string
		if o.Cf != nil {
			qrCf = *o.Cf
		}
		qCf := qrCf
		if qCf != "" {
			if err := r.SetQueryParam("cf", qCf); err != nil {
				return err
			}
		}

	}

	if o.DisableSnapshot != nil {

		// query param disable_snapshot
		var qrDisableSnapshot bool
		if o.DisableSnapshot != nil {
			qrDisableSnapshot = *o.DisableSnapshot
		}
		qDisableSnapshot := swag.FormatBool(qrDisableSnapshot)
		if qDisableSnapshot != "" {
			if err := r.SetQueryParam("disable_snapshot", qDisableSnapshot); err != nil {
				return err
			}
		}

	}

	// path param keyspace
	if err := r.SetPathParam("keyspace", o.Keyspace); err != nil {
		return err
	}

	if o.SkipCorrupted != nil {

		// query param skip_corrupted
		var qrSkipCorrupted bool
		if o.SkipCorrupted != nil {
			qrSkipCorrupted = *o.SkipCorrupted
		}
		qSkipCorrupted := swag.FormatBool(qrSkipCorrupted)
		if qSkipCorrupted != "" {
			if err := r.SetQueryParam("skip_corrupted", qSkipCorrupted); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
