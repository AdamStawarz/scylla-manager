// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scylladb/mermaid/sched/runner (interfaces: Runner)

// Package mermaidmock is a generated GoMock package.
package mermaidmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	runner "github.com/scylladb/mermaid/sched/runner"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// RunTask mocks base method
func (m *MockRunner) RunTask(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 runner.TaskProperties) error {
	ret := m.ctrl.Call(m, "RunTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask
func (mr *MockRunnerMockRecorder) RunTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockRunner)(nil).RunTask), arg0, arg1, arg2, arg3)
}

// StopTask mocks base method
func (m *MockRunner) StopTask(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 runner.TaskProperties) error {
	ret := m.ctrl.Call(m, "StopTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTask indicates an expected call of StopTask
func (mr *MockRunnerMockRecorder) StopTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*MockRunner)(nil).StopTask), arg0, arg1, arg2, arg3)
}

// TaskStatus mocks base method
func (m *MockRunner) TaskStatus(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 runner.TaskProperties) (runner.Status, error) {
	ret := m.ctrl.Call(m, "TaskStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(runner.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskStatus indicates an expected call of TaskStatus
func (mr *MockRunnerMockRecorder) TaskStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskStatus", reflect.TypeOf((*MockRunner)(nil).TaskStatus), arg0, arg1, arg2, arg3)
}
