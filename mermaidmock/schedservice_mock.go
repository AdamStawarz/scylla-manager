// Code generated by MockGen. DO NOT EDIT.
// Source: sched.go

// Package mermaidmock is a generated GoMock package.
package mermaidmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sched "github.com/scylladb/mermaid/sched"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// MockSchedService is a mock of SchedService interface
type MockSchedService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedServiceMockRecorder
}

// MockSchedServiceMockRecorder is the mock recorder for MockSchedService
type MockSchedServiceMockRecorder struct {
	mock *MockSchedService
}

// NewMockSchedService creates a new mock instance
func NewMockSchedService(ctrl *gomock.Controller) *MockSchedService {
	mock := &MockSchedService{ctrl: ctrl}
	mock.recorder = &MockSchedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedService) EXPECT() *MockSchedServiceMockRecorder {
	return m.recorder
}

// GetTask mocks base method
func (m *MockSchedService) GetTask(ctx context.Context, clusterID uuid.UUID, tp sched.TaskType, idOrName string) (*sched.Task, error) {
	ret := m.ctrl.Call(m, "GetTask", ctx, clusterID, tp, idOrName)
	ret0, _ := ret[0].(*sched.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockSchedServiceMockRecorder) GetTask(ctx, clusterID, tp, idOrName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockSchedService)(nil).GetTask), ctx, clusterID, tp, idOrName)
}

// PutTask mocks base method
func (m *MockSchedService) PutTask(ctx context.Context, t *sched.Task) error {
	ret := m.ctrl.Call(m, "PutTask", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTask indicates an expected call of PutTask
func (mr *MockSchedServiceMockRecorder) PutTask(ctx, t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTask", reflect.TypeOf((*MockSchedService)(nil).PutTask), ctx, t)
}

// DeleteTask mocks base method
func (m *MockSchedService) DeleteTask(ctx context.Context, t *sched.Task) error {
	ret := m.ctrl.Call(m, "DeleteTask", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockSchedServiceMockRecorder) DeleteTask(ctx, t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockSchedService)(nil).DeleteTask), ctx, t)
}

// ListTasks mocks base method
func (m *MockSchedService) ListTasks(ctx context.Context, clusterID uuid.UUID, tp sched.TaskType) ([]*sched.Task, error) {
	ret := m.ctrl.Call(m, "ListTasks", ctx, clusterID, tp)
	ret0, _ := ret[0].([]*sched.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MockSchedServiceMockRecorder) ListTasks(ctx, clusterID, tp interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockSchedService)(nil).ListTasks), ctx, clusterID, tp)
}

// StartTask mocks base method
func (m *MockSchedService) StartTask(ctx context.Context, t *sched.Task) error {
	ret := m.ctrl.Call(m, "StartTask", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTask indicates an expected call of StartTask
func (mr *MockSchedServiceMockRecorder) StartTask(ctx, t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockSchedService)(nil).StartTask), ctx, t)
}

// StopTask mocks base method
func (m *MockSchedService) StopTask(ctx context.Context, t *sched.Task) error {
	ret := m.ctrl.Call(m, "StopTask", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTask indicates an expected call of StopTask
func (mr *MockSchedServiceMockRecorder) StopTask(ctx, t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*MockSchedService)(nil).StopTask), ctx, t)
}

// GetLastRun mocks base method
func (m *MockSchedService) GetLastRun(ctx context.Context, t *sched.Task, n int) ([]*sched.Run, error) {
	ret := m.ctrl.Call(m, "GetLastRun", ctx, t, n)
	ret0, _ := ret[0].([]*sched.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRun indicates an expected call of GetLastRun
func (mr *MockSchedServiceMockRecorder) GetLastRun(ctx, t, n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRun", reflect.TypeOf((*MockSchedService)(nil).GetLastRun), ctx, t, n)
}
