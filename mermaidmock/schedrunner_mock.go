// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package mermaidmock is a generated GoMock package.
package mermaidmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// MockRunner is a mock of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRunner) Run(ctx context.Context, clusterID, runID uuid.UUID, props TaskProperties) error {
	ret := m.ctrl.Call(m, "Run", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunnerMockRecorder) Run(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), ctx, clusterID, runID, props)
}

// Stop mocks base method
func (m *MockRunner) Stop(ctx context.Context, clusterID, runID uuid.UUID, props TaskProperties) error {
	ret := m.ctrl.Call(m, "Stop", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRunnerMockRecorder) Stop(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRunner)(nil).Stop), ctx, clusterID, runID, props)
}

// Status mocks base method
func (m *MockRunner) Status(ctx context.Context, clusterID, runID uuid.UUID, props TaskProperties) (Status, string, error) {
	ret := m.ctrl.Call(m, "Status", ctx, clusterID, runID, props)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status
func (mr *MockRunnerMockRecorder) Status(ctx, clusterID, runID, props interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockRunner)(nil).Status), ctx, clusterID, runID, props)
}
