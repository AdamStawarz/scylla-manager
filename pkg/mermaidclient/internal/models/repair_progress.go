// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepairProgress repair progress
// swagger:model RepairProgress
type RepairProgress struct {

	// completed at
	// Format: date-time
	CompletedAt *strfmt.DateTime `json:"completed_at,omitempty"`

	// dcs
	Dcs []string `json:"dcs"`

	// error
	Error int64 `json:"error,omitempty"`

	// per host
	PerHost []*RepairProgressPerHostItems0 `json:"per_host"`

	// per table
	PerTable []*TableRepairProgress `json:"per_table"`

	// started at
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at,omitempty"`

	// success
	Success int64 `json:"success,omitempty"`

	// token ranges
	TokenRanges int64 `json:"token_ranges,omitempty"`
}

// Validate validates this repair progress
func (m *RepairProgress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepairProgress) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RepairProgress) validatePerHost(formats strfmt.Registry) error {

	if swag.IsZero(m.PerHost) { // not required
		return nil
	}

	for i := 0; i < len(m.PerHost); i++ {
		if swag.IsZero(m.PerHost[i]) { // not required
			continue
		}

		if m.PerHost[i] != nil {
			if err := m.PerHost[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("per_host" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepairProgress) validatePerTable(formats strfmt.Registry) error {

	if swag.IsZero(m.PerTable) { // not required
		return nil
	}

	for i := 0; i < len(m.PerTable); i++ {
		if swag.IsZero(m.PerTable[i]) { // not required
			continue
		}

		if m.PerTable[i] != nil {
			if err := m.PerTable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("per_table" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepairProgress) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepairProgress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepairProgress) UnmarshalBinary(b []byte) error {
	var res RepairProgress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepairProgressPerHostItems0 repair progress per host items0
// swagger:model RepairProgressPerHostItems0
type RepairProgressPerHostItems0 struct {

	// host
	Host string `json:"host,omitempty"`

	// tables
	Tables []*TableRepairProgress `json:"tables"`
}

// Validate validates this repair progress per host items0
func (m *RepairProgressPerHostItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepairProgressPerHostItems0) validateTables(formats strfmt.Registry) error {

	if swag.IsZero(m.Tables) { // not required
		return nil
	}

	for i := 0; i < len(m.Tables); i++ {
		if swag.IsZero(m.Tables[i]) { // not required
			continue
		}

		if m.Tables[i] != nil {
			if err := m.Tables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepairProgressPerHostItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepairProgressPerHostItems0) UnmarshalBinary(b []byte) error {
	var res RepairProgressPerHostItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
