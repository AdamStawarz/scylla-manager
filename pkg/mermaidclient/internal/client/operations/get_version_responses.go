// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/scylladb/mermaid/pkg/mermaidclient/internal/models"
)

// GetVersionReader is a Reader for the GetVersion structure.
type GetVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVersionOK creates a GetVersionOK with default headers values
func NewGetVersionOK() *GetVersionOK {
	return &GetVersionOK{}
}

/*GetVersionOK handles this case with default header values.

Server version
*/
type GetVersionOK struct {
	Payload *models.Version
}

func (o *GetVersionOK) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionOK  %+v", 200, o.Payload)
}

func (o *GetVersionOK) GetPayload() *models.Version {
	return o.Payload
}

func (o *GetVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Version)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionBadRequest creates a GetVersionBadRequest with default headers values
func NewGetVersionBadRequest() *GetVersionBadRequest {
	return &GetVersionBadRequest{}
}

/*GetVersionBadRequest handles this case with default header values.

Bad Request
*/
type GetVersionBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetVersionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionNotFound creates a GetVersionNotFound with default headers values
func NewGetVersionNotFound() *GetVersionNotFound {
	return &GetVersionNotFound{}
}

/*GetVersionNotFound handles this case with default header values.

Not found
*/
type GetVersionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetVersionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionInternalServerError creates a GetVersionInternalServerError with default headers values
func NewGetVersionInternalServerError() *GetVersionInternalServerError {
	return &GetVersionInternalServerError{}
}

/*GetVersionInternalServerError handles this case with default header values.

Server error
*/
type GetVersionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /version][%d] getVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVersionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionDefault creates a GetVersionDefault with default headers values
func NewGetVersionDefault(code int) *GetVersionDefault {
	return &GetVersionDefault{
		_statusCode: code,
	}
}

/*GetVersionDefault handles this case with default header values.

Unexpected error
*/
type GetVersionDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get version default response
func (o *GetVersionDefault) Code() int {
	return o._statusCode
}

func (o *GetVersionDefault) Error() string {
	return fmt.Sprintf("[GET /version][%d] GetVersion default  %+v", o._statusCode, o.Payload)
}

func (o *GetVersionDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
