// Copyright (C) 2017 ScyllaDB

package cpuset

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"

	"github.com/pkg/errors"
	"github.com/scylladb/go-set/iset"
	"go.uber.org/multierr"
	"golang.org/x/sys/unix"
)

const (
	// scyllaConfigFile is a file generated by a Scylla configuration tools,
	// it contains additional flags --cpuset and --smp that are passed to
	// scylla-server on start.
	scyllaConfigFile = "/etc/scylla.d/cpuset.conf"
	// cpuSetPattern matches the configuration line in the scyllaConfigFile ex.
	// CPUSET="--cpuset 0 --smp 1".
	cpuSetPattern = `^\s*CPUSET=\s*\"(?:\s*--cpuset(?:\s*|=)(?P<cpuset>\d+(?:[-,]\d+)*))?(?:\s*--smp(?:\s*|=)(?P<smp>\d+))?"`
)

// ErrNoCPUSetConfig is returned in presence of an empty cpuset.conf file.
var ErrNoCPUSetConfig = errors.New("no CPUSET configuration")

// ParseScyllaConfigFile returns a list of busy CPUs based on /etc/scylla.d/cpuset.conf
// contents.
func ParseScyllaConfigFile() ([]int, error) {
	return parseConfigFile(scyllaConfigFile)
}

func parseConfigFile(name string) ([]int, error) {
	file, err := os.Open(name)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var groups []string
	p := regexp.MustCompile(cpuSetPattern)
	s := bufio.NewScanner(file)
	for s.Scan() {
		if m := p.FindStringSubmatch(s.Text()); m != nil {
			groups = m
		}
	}
	if err := s.Err(); err != nil {
		return nil, err
	}
	if groups == nil {
		return nil, ErrNoCPUSetConfig // nolint: errorlint
	}

	idx := 0
	for i, n := range p.SubexpNames() {
		if n == "cpuset" {
			idx = i
			break
		}
	}

	if groups[idx] == "" {
		return nil, errors.New("CPUSET configuration is missing cpuset flag")
	}

	return parseCPUSet(groups[idx])
}

func parseCPUSet(s string) ([]int, error) {
	cpus := iset.New()

	for _, g := range strings.Split(s, ",") {
		v := strings.Split(g, "-")
		start, err := strconv.ParseInt(v[0], 10, 64)
		if err != nil {
			return nil, err
		}
		end, err := strconv.ParseInt(v[len(v)-1], 10, 64)
		if err != nil {
			return nil, err
		}
		for i := start; i <= end; i++ {
			cpus.Add(int(i))
		}
	}

	l := cpus.List()
	sort.Ints(l)
	return l, nil
}

// AvailableCPUs returns a list of CPUs of length wantCPUs that does not contain
// any of the busyCPUs. If the conditions cannot be met error is returned.
// AvailableCPUs selects the CPUs with the highest available indexes to offload
// shard 0...
func AvailableCPUs(busyCPUs []int, wantCPUs int) ([]int, error) {
	var cpus unix.CPUSet
	if err := unix.SchedGetaffinity(os.Getpid(), &cpus); err != nil {
		return nil, errors.Wrap(err, "get affinity")
	}
	for _, c := range busyCPUs {
		cpus.Clear(c)
	}

	n := cpus.Count()
	if n == 0 {
		return nil, errors.Errorf("no available CPUs")
	}
	if n < wantCPUs {
		return nil, errors.Errorf("not enough CPUs available, got %d want %d", n, wantCPUs)
	}

	// Clear all but last wanted CPUs
	for i := 0; cpus.Count() > wantCPUs; i++ {
		if cpus.IsSet(i) {
			cpus.Clear(i)
		}
	}

	return cpulist(&cpus), nil
}

// SchedSetAffinity makes all of this process threads run on the provided set
// of CPUs only.
func SchedSetAffinity(useCPUs []int) error {
	pids, err := osTasks(os.Getpid())
	if err != nil {
		return errors.Wrap(err, "get tasks")
	}

	return schedSetAffinityToMany(pids, cpuset(useCPUs))
}

func osTasks(pid int) ([]int, error) {
	files, err := ioutil.ReadDir(fmt.Sprint("/proc/", pid, "/task"))
	if err != nil {
		return nil, err
	}

	var pids []int
	for _, f := range files {
		p, _ := strconv.ParseInt(f.Name(), 10, 64) // nolint: errcheck
		pids = append(pids, int(p))
	}

	return pids, nil
}

func schedSetAffinityToMany(pids []int, set *unix.CPUSet) (err error) {
	for _, pid := range pids {
		err = multierr.Append(unix.SchedSetaffinity(pid, set), errors.Wrapf(err, "pid %d", pid))
	}
	return
}

func cpuset(cpus []int) *unix.CPUSet {
	set := &unix.CPUSet{}
	set.Zero()
	for _, c := range cpus {
		set.Set(c)
	}
	return set
}

func cpulist(set *unix.CPUSet) []int {
	var cpus []int

	n := set.Count()
	for i := 0; len(cpus) < n; i++ {
		if set.IsSet(i) {
			cpus = append(cpus, i)
		}
	}

	return cpus
}
