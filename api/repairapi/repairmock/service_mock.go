// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package repairmock is a generated GoMock package.
package repairmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repair "github.com/scylladb/mermaid/repair"
	uuid "github.com/scylladb/mermaid/uuid"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUnit mocks base method
func (m *MockService) GetUnit(ctx context.Context, clusterID, ID uuid.UUID) (*repair.Unit, error) {
	ret := m.ctrl.Call(m, "GetUnit", ctx, clusterID, ID)
	ret0, _ := ret[0].(*repair.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnit indicates an expected call of GetUnit
func (mr *MockServiceMockRecorder) GetUnit(ctx, clusterID, ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnit", reflect.TypeOf((*MockService)(nil).GetUnit), ctx, clusterID, ID)
}

// PutUnit mocks base method
func (m *MockService) PutUnit(ctx context.Context, u *repair.Unit) error {
	ret := m.ctrl.Call(m, "PutUnit", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUnit indicates an expected call of PutUnit
func (mr *MockServiceMockRecorder) PutUnit(ctx, u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUnit", reflect.TypeOf((*MockService)(nil).PutUnit), ctx, u)
}

// DeleteUnit mocks base method
func (m *MockService) DeleteUnit(ctx context.Context, clusterID, ID uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteUnit", ctx, clusterID, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit
func (mr *MockServiceMockRecorder) DeleteUnit(ctx, clusterID, ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockService)(nil).DeleteUnit), ctx, clusterID, ID)
}

// ListUnitIDs mocks base method
func (m *MockService) ListUnitIDs(ctx context.Context, clusterID uuid.UUID) ([]uuid.UUID, error) {
	ret := m.ctrl.Call(m, "ListUnitIDs", ctx, clusterID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnitIDs indicates an expected call of ListUnitIDs
func (mr *MockServiceMockRecorder) ListUnitIDs(ctx, clusterID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnitIDs", reflect.TypeOf((*MockService)(nil).ListUnitIDs), ctx, clusterID)
}
